{"version":3,"file":"cubemap.js","sources":["../../src/adapters/cubemap/index.js"],"sourcesContent":["import { BoxGeometry, Mesh, Texture } from 'three';\nimport { AbstractAdapter, CONSTANTS, PSVError, SYSTEM, utils } from '../..';\n\n\n/**\n * @typedef {Object} PSV.adapters.CubemapAdapter.Cubemap\n * @summary Object defining a cubemap\n * @property {string} left\n * @property {string} front\n * @property {string} right\n * @property {string} back\n * @property {string} top\n * @property {string} bottom\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapAdapter.Options\n * @property {boolean} [flipTopBottom=false] - set to true if the top and bottom faces are not correctly oriented\n */\n\n\n// PSV faces order is left, front, right, back, top, bottom\n// 3JS faces order is left, right, top, bottom, back, front\nexport const CUBE_ARRAY = [0, 2, 4, 5, 3, 1];\nexport const CUBE_HASHMAP = ['left', 'right', 'top', 'bottom', 'back', 'front'];\n\n\n/**\n * @summary Adapter for cubemaps\n * @memberof PSV.adapters\n * @extends PSV.adapters.AbstractAdapter\n */\nexport class CubemapAdapter extends AbstractAdapter {\n\n  static id = 'cubemap';\n  static supportsDownload = false;\n  static supportsOverlay = true;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.adapters.CubemapAdapter.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @member {PSV.adapters.CubemapAdapter.Options}\n     * @private\n     */\n    this.config = {\n      flipTopBottom: false,\n      ...options,\n    };\n  }\n\n  /**\n   * @override\n   */\n  supportsTransition() {\n    return true;\n  }\n\n  /**\n   * @override\n   */\n  supportsPreload() {\n    return true;\n  }\n\n  /**\n   * @override\n   * @param {string[] | PSV.adapters.CubemapAdapter.Cubemap} panorama\n   * @returns {Promise.<PSV.TextureData>}\n   */\n  loadTexture(panorama) {\n    const cleanPanorama = [];\n\n    if (Array.isArray(panorama)) {\n      if (panorama.length !== 6) {\n        return Promise.reject(new PSVError('Must provide exactly 6 image paths when using cubemap.'));\n      }\n\n      // reorder images\n      for (let i = 0; i < 6; i++) {\n        cleanPanorama[i] = panorama[CUBE_ARRAY[i]];\n      }\n    }\n    else if (typeof panorama === 'object') {\n      if (!CUBE_HASHMAP.every(side => !!panorama[side])) {\n        return Promise.reject(new PSVError('Must provide exactly left, front, right, back, top, bottom when using cubemap.'));\n      }\n\n      // transform into array\n      CUBE_HASHMAP.forEach((side, i) => {\n        cleanPanorama[i] = panorama[side];\n      });\n    }\n    else {\n      return Promise.reject(new PSVError('Invalid cubemap panorama, are you using the right adapter?'));\n    }\n\n    if (this.psv.config.fisheye) {\n      utils.logWarn('fisheye effect with cubemap texture can generate distorsion');\n    }\n\n    const promises = [];\n    const progress = [0, 0, 0, 0, 0, 0];\n\n    for (let i = 0; i < 6; i++) {\n      promises.push(\n        this.psv.textureLoader.loadImage(cleanPanorama[i], (p) => {\n          progress[i] = p;\n          this.psv.loader.setProgress(utils.sum(progress) / 6);\n        })\n          .then(img => this.__createCubemapTexture(img))\n      );\n    }\n\n    return Promise.all(promises)\n      .then(texture => ({ panorama, texture }));\n  }\n\n  /**\n   * @summary Creates the final texture from image\n   * @param {HTMLImageElement} img\n   * @returns {external:THREE.Texture}\n   * @private\n   */\n  __createCubemapTexture(img) {\n    if (img.width !== img.height) {\n      utils.logWarn('Invalid base image, the width equal the height');\n    }\n\n    // resize image\n    if (img.width > SYSTEM.maxTextureWidth) {\n      const ratio = SYSTEM.getMaxCanvasWidth() / img.width;\n\n      const buffer = document.createElement('canvas');\n      buffer.width = img.width * ratio;\n      buffer.height = img.height * ratio;\n\n      const ctx = buffer.getContext('2d');\n      ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n      return utils.createTexture(buffer);\n    }\n\n    return utils.createTexture(img);\n  }\n\n  /**\n   * @override\n   */\n  createMesh(scale = 1) {\n    const cubeSize = CONSTANTS.SPHERE_RADIUS * 2 * scale;\n    const geometry = new BoxGeometry(cubeSize, cubeSize, cubeSize)\n      .scale(1, 1, -1);\n\n    const materials = [];\n    for (let i = 0; i < 6; i++) {\n      materials.push(AbstractAdapter.createOverlayMaterial({\n        additionalUniforms: {\n          rotation: { value: 0.0 },\n        },\n        overrideVertexShader: `\nuniform float rotation;\n\nvarying vec2 vUv;\n\nconst float mid = 0.5;\n\nvoid main() {\n  if (rotation == 0.0) {\n    vUv = uv;\n  } else {\n    vUv = vec2(\n      cos(rotation) * (uv.x - mid) + sin(rotation) * (uv.y - mid) + mid,\n      cos(rotation) * (uv.y - mid) - sin(rotation) * (uv.x - mid) + mid\n    );\n  }\n  gl_Position = projectionMatrix *  modelViewMatrix * vec4( position, 1.0 );\n}`,\n      }));\n    }\n\n    return new Mesh(geometry, materials);\n  }\n\n  /**\n   * @override\n   */\n  setTexture(mesh, textureData) {\n    const { texture } = textureData;\n\n    for (let i = 0; i < 6; i++) {\n      if (this.config.flipTopBottom && (i === 2 || i === 3)) {\n        this.__setUniform(mesh, i, 'rotation', Math.PI);\n      }\n\n      this.__setUniform(mesh, i, AbstractAdapter.OVERLAY_UNIFORMS.panorama, texture[i]);\n    }\n\n    this.setOverlay(mesh, null);\n  }\n\n  /**\n   * @override\n   */\n  setOverlay(mesh, textureData, opacity) {\n    for (let i = 0; i < 6; i++) {\n      this.__setUniform(mesh, i, AbstractAdapter.OVERLAY_UNIFORMS.overlayOpacity, opacity);\n      if (!textureData) {\n        this.__setUniform(mesh, i, AbstractAdapter.OVERLAY_UNIFORMS.overlay, new Texture());\n      }\n      else {\n        this.__setUniform(mesh, i, AbstractAdapter.OVERLAY_UNIFORMS.overlay, textureData.texture[i]);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  setTextureOpacity(mesh, opacity) {\n    for (let i = 0; i < 6; i++) {\n      this.__setUniform(mesh, i, AbstractAdapter.OVERLAY_UNIFORMS.globalOpacity, opacity);\n      mesh.material[i].transparent = opacity < 1;\n    }\n  }\n\n  /**\n   * @override\n   */\n  disposeTexture(textureData) {\n    textureData.texture?.forEach(texture => texture.dispose());\n  }\n\n  /**\n   * @param {external:THREE.Mesh} mesh\n   * @param {number} index\n   * @param {string} uniform\n   * @param {*} value\n   * @private\n   */\n  __setUniform(mesh, index, uniform, value) {\n    if (mesh.material[index].uniforms[uniform].value instanceof Texture) {\n      mesh.material[index].uniforms[uniform].value.dispose();\n    }\n    mesh.material[index].uniforms[uniform].value = value;\n  }\n\n}\n"],"names":["CUBE_ARRAY","CUBE_HASHMAP","CubemapAdapter","psv","options","config","flipTopBottom","supportsTransition","supportsPreload","loadTexture","panorama","cleanPanorama","Array","isArray","length","Promise","reject","PSVError","i","every","side","forEach","fisheye","utils","logWarn","promises","progress","push","textureLoader","loadImage","p","loader","setProgress","sum","then","img","__createCubemapTexture","all","texture","width","height","SYSTEM","maxTextureWidth","ratio","getMaxCanvasWidth","buffer","document","createElement","ctx","getContext","drawImage","createTexture","createMesh","scale","cubeSize","CONSTANTS","SPHERE_RADIUS","geometry","BoxGeometry","materials","AbstractAdapter","createOverlayMaterial","additionalUniforms","rotation","value","overrideVertexShader","Mesh","setTexture","mesh","textureData","__setUniform","Math","PI","OVERLAY_UNIFORMS","setOverlay","opacity","overlayOpacity","overlay","Texture","setTextureOpacity","globalOpacity","material","transparent","disposeTexture","dispose","index","uniform","uniforms","id","supportsDownload","supportsOverlay"],"mappings":"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"}