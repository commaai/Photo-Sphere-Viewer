{"version":3,"file":"little-planet.js","sources":["../../src/adapters/little-planet/index.js"],"sourcesContent":["import { Euler, MathUtils, Matrix4, Mesh, PlaneBufferGeometry, ShaderMaterial, Texture } from 'three';\nimport { CONSTANTS, DEFAULTS, EquirectangularAdapter } from '../..';\n\n\nDEFAULTS.defaultLat = -Math.PI / 2;\n\nconst euler = new Euler();\n\n\n/**\n * @summary Adapter for equirectangular panoramas displayed with little planet effect\n * @memberof PSV.adapters\n * @extends PSV.adapters.AbstractAdapter\n */\nexport class LittlePlanetAdapter extends EquirectangularAdapter {\n\n  static id = 'little-planet';\n  static supportsOverlay = false;\n\n  /**\n   * @param {PSV.Viewer} psv\n   */\n  constructor(psv) {\n    super(psv);\n\n    this.psv.prop.littlePlanet = true;\n\n    this.psv.on(CONSTANTS.EVENTS.SIZE_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n  }\n\n  /**\n   * @override\n   */\n  supportsTransition() {\n    return false;\n  }\n\n  /**\n   * @override\n   */\n  supportsPreload() {\n    return true;\n  }\n\n  /**\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case CONSTANTS.EVENTS.SIZE_UPDATED:\n        this.__setResolution(e.args[0]);\n        break;\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        this.__setZoom();\n        break;\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n        this.__setPosition(e.args[0]);\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @param {PSV.Size} size\n   * @private\n   */\n  __setResolution(size) {\n    this.uniforms.resolution.value = size.width / size.height;\n  }\n\n  /**\n   * @private\n   */\n  __setZoom() {\n    // mapping values are empirical\n    this.uniforms.zoom.value = Math.max(0.1, MathUtils.mapLinear(this.psv.prop.vFov, 90, 30, 50, 2));\n  }\n\n  /**\n   * @param {PSV.Position} position\n   * @private\n   */\n  __setPosition(position) {\n    euler.set(\n      Math.PI / 2 + position.latitude,\n      0,\n      -Math.PI / 2 - position.longitude,\n      'ZYX'\n    );\n\n    this.uniforms.transform.value.makeRotationFromEuler(euler);\n  }\n\n  /**\n   * @override\n   */\n  createMesh() {\n    const geometry = new PlaneBufferGeometry(20, 10)\n      .translate(0, 0, -1);\n\n    // this one was copied from https://github.com/pchen66/panolens.js\n    const material = new ShaderMaterial({\n      uniforms: {\n        panorama  : { value: new Texture() },\n        resolution: { value: 2.0 },\n        transform : { value: new Matrix4() },\n        zoom      : { value: 10.0 },\n        opacity   : { value: 1.0 },\n      },\n\n      vertexShader: `\nvarying vec2 vUv;\n\nvoid main() {\n  vUv = uv;\n  gl_Position = vec4( position, 1.0 );\n}`,\n\n      fragmentShader: `\nuniform sampler2D panorama;\nuniform float resolution;\nuniform mat4 transform;\nuniform float zoom;\nuniform float opacity;\n\nvarying vec2 vUv;\n\nconst float PI = 3.1415926535897932384626433832795;\n\nvoid main() {\n  vec2 position = -1.0 + 2.0 * vUv;\n  position *= vec2( zoom * resolution, zoom * 0.5 );\n\n  float x2y2 = position.x * position.x + position.y * position.y;\n  vec3 sphere_pnt = vec3( 2. * position, x2y2 - 1. ) / ( x2y2 + 1. );\n  sphere_pnt = vec3( transform * vec4( sphere_pnt, 1.0 ) );\n\n  vec2 sampleUV = vec2(\n    1.0 - (atan(sphere_pnt.y, sphere_pnt.x) / PI + 1.0) * 0.5,\n    (asin(sphere_pnt.z) / PI + 0.5)\n  );\n\n  gl_FragColor = texture2D( panorama, sampleUV );\n  gl_FragColor.a *= opacity;\n}`,\n    });\n\n    this.uniforms = material.uniforms;\n\n    return new Mesh(geometry, material);\n  }\n\n  /**\n   * @override\n   */\n  setTexture(mesh, textureData) {\n    mesh.material.uniforms.panorama.value.dispose();\n    mesh.material.uniforms.panorama.value = textureData.texture;\n  }\n\n}\n"],"names":["DEFAULTS","defaultLat","Math","PI","euler","Euler","LittlePlanetAdapter","psv","prop","littlePlanet","on","CONSTANTS","EVENTS","SIZE_UPDATED","ZOOM_UPDATED","POSITION_UPDATED","supportsTransition","supportsPreload","handleEvent","e","type","__setResolution","args","__setZoom","__setPosition","size","uniforms","resolution","value","width","height","zoom","max","MathUtils","mapLinear","vFov","position","set","latitude","longitude","transform","makeRotationFromEuler","createMesh","geometry","PlaneBufferGeometry","translate","material","ShaderMaterial","panorama","Texture","Matrix4","opacity","vertexShader","fragmentShader","Mesh","setTexture","mesh","textureData","dispose","texture","EquirectangularAdapter","id","supportsOverlay"],"mappings":"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"}