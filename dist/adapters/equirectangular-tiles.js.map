{"version":3,"file":"equirectangular-tiles.js","sources":["../../src/adapters/shared/Task.js","../../src/adapters/shared/Queue.js","../../src/adapters/shared/tiles-utils.js","../../src/adapters/equirectangular-tiles/index.js"],"sourcesContent":["/**\n * @summary Loading task\n * @memberOf PSV.adapters\n * @private\n */\nexport class Task {\n\n  static STATUS = {\n    DISABLED : -1,\n    PENDING  : 0,\n    RUNNING  : 1,\n    CANCELLED: 2,\n    DONE     : 3,\n    ERROR    : 4,\n  };\n\n  /**\n   * @param {string} id\n   * @param {number} priority\n   * @param {function(Task): Promise} fn\n   */\n  constructor(id, priority, fn) {\n    this.id = id;\n    this.priority = priority;\n    this.fn = fn;\n    this.status = Task.STATUS.PENDING;\n  }\n\n  start() {\n    this.status = Task.STATUS.RUNNING;\n    return this.fn(this)\n      .then(() => {\n        this.status = Task.STATUS.DONE;\n      }, () => {\n        this.status = Task.STATUS.ERROR;\n      });\n  }\n\n  cancel() {\n    this.status = Task.STATUS.CANCELLED;\n  }\n\n  isCancelled() {\n    return this.status === Task.STATUS.CANCELLED;\n  }\n\n}\n","import { Task } from './Task';\n\n/**\n * @summary Loading queue\n * @memberOf PSV.adapters\n * @private\n */\nexport class Queue {\n\n  /**\n   * @param {int} concurency\n   */\n  constructor(concurency = 4) {\n    this.concurency = concurency;\n    this.runningTasks = {};\n    this.tasks = {};\n  }\n\n  enqueue(task) {\n    this.tasks[task.id] = task;\n  }\n\n  clear() {\n    Object.values(this.tasks).forEach(task => task.cancel());\n    this.tasks = {};\n    this.runningTasks = {};\n  }\n\n  setPriority(taskId, priority) {\n    const task = this.tasks[taskId];\n    if (task) {\n      task.priority = priority;\n      if (task.status === Task.STATUS.DISABLED) {\n        task.status = Task.STATUS.PENDING;\n      }\n    }\n  }\n\n  disableAllTasks() {\n    Object.values(this.tasks).forEach((task) => {\n      task.status = Task.STATUS.DISABLED;\n    });\n  }\n\n  start() {\n    if (Object.keys(this.runningTasks).length >= this.concurency) {\n      return;\n    }\n\n    const nextTask = Object.values(this.tasks)\n      .filter(task => task.status === Task.STATUS.PENDING)\n      .sort((a, b) => b.priority - a.priority)\n      .pop();\n\n    if (nextTask) {\n      this.runningTasks[nextTask.id] = true;\n\n      nextTask.start()\n        .then(() => {\n          if (!nextTask.isCancelled()) {\n            delete this.tasks[nextTask.id];\n            delete this.runningTasks[nextTask.id];\n            this.start();\n          }\n        });\n\n      this.start(); // start tasks until max concurrency is reached\n    }\n  }\n\n}\n","import { CanvasTexture, LineSegments, Mesh, MeshBasicMaterial, SphereGeometry, WireframeGeometry } from 'three';\nimport { SYSTEM, utils } from '../..';\n\n/**\n * @summary Generates an material for errored tiles\n * @memberOf PSV.adapters\n * @return {external:THREE.MeshBasicMaterial}\n * @private\n */\nexport function buildErrorMaterial(width, height) {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext('2d');\n\n  ctx.fillStyle = '#333';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.font = `${canvas.width / 5}px serif`;\n  ctx.fillStyle = '#a22';\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('⚠', canvas.width / 2, canvas.height / 2);\n\n  const texture = new CanvasTexture(canvas);\n  return new MeshBasicMaterial({ map: texture });\n}\n\n/**\n * @summary Create the texture for the base image\n * @memberOf PSV.adapters\n * @param {HTMLImageElement} img\n * @param {boolean} blur\n * @param {function} getHeight\n * @return {external:THREE.Texture}\n * @private\n */\nexport function createBaseTexture(img, blur, getHeight) {\n  if (blur || img.width > SYSTEM.maxTextureWidth) {\n    const ratio = Math.min(1, SYSTEM.getMaxCanvasWidth() / img.width);\n\n    const buffer = document.createElement('canvas');\n    buffer.width = img.width * ratio;\n    buffer.height = getHeight(img.width);\n\n    const ctx = buffer.getContext('2d');\n    if (blur) {\n      ctx.filter = 'blur(1px)';\n    }\n    ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n    return utils.createTexture(buffer);\n  }\n\n  return utils.createTexture(img);\n}\n\n/**\n * @summary Creates a wireframe geometry, for debug\n * @memberOf PSV.adapters\n * @param {THREE.BufferGeometry} geometry\n * @return {THREE.Object3D}\n * @private\n */\nexport function createWireFrame(geometry) {\n  const wireframe = new WireframeGeometry(geometry);\n  const line = new LineSegments(wireframe);\n  line.material.depthTest = false;\n  line.material.opacity = 0.25;\n  line.material.transparent = true;\n  return line;\n}\n\n/**\n * @summary Creates a small red sphere, for debug\n * @memberOf PSV.adapters\n * @return {THREE.Object3D}\n * @private\n */\nexport function createDot(x, y, z) {\n  const geom = new SphereGeometry(0.1);\n  const material = new MeshBasicMaterial({ color: 0xff0000 });\n  const mesh = new Mesh(geom, material);\n  mesh.position.set(x, y, z);\n  return mesh;\n}\n","import { Frustum, ImageLoader, MathUtils, Matrix4, Mesh, MeshBasicMaterial, SphereGeometry, Vector3 } from 'three';\nimport { CONSTANTS, EquirectangularAdapter, PSVError, utils } from '../..';\nimport { Queue } from '../shared/Queue';\nimport { Task } from '../shared/Task';\nimport { buildErrorMaterial, createBaseTexture } from '../shared/tiles-utils';\n\n\n/**\n * @callback TileUrl\n * @summary Function called to build a tile url\n * @memberOf PSV.adapters.EquirectangularTilesAdapter\n * @param {int} col\n * @param {int} row\n * @returns {string}\n */\n\n/**\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Panorama\n * @summary Configuration of a tiled panorama\n * @property {string} [baseUrl] - low resolution panorama loaded before tiles\n * @property {PSV.PanoData | PSV.PanoDataProvider} [basePanoData] - panoData configuration associated to low resolution panorama loaded before tiles\n * @property {int} width - complete panorama width (height is always width/2)\n * @property {int} cols - number of vertical tiles\n * @property {int} rows - number of horizontal tiles\n * @property {PSV.adapters.EquirectangularTilesAdapter.TileUrl} tileUrl - function to build a tile url\n */\n\n/**\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Options\n * @property {number} [resolution=64] - number of faces of the sphere geometry, higher values may decrease performances\n * @property {boolean} [showErrorTile=true] - shows a warning sign on tiles that cannot be loaded\n * @property {boolean} [baseBlur=true] - applies a blur to the low resolution panorama\n */\n\n/**\n * @typedef {Object} PSV.adapters.EquirectangularTilesAdapter.Tile\n * @private\n * @property {int} col\n * @property {int} row\n * @property {float} angle\n */\n\n/* the faces of the top and bottom rows are made of a single triangle (3 vertices)\n * all other faces are made of two triangles (6 vertices)\n * bellow is the indexing of each face vertices\n *\n * first row faces:\n *     ⋀\n *    /0\\\n *   /   \\\n *  /     \\\n * /1     2\\\n * ¯¯¯¯¯¯¯¯¯\n *\n * other rows faces:\n * _________\n * |\\1    0|\n * |3\\     |\n * |  \\    |\n * |   \\   |\n * |    \\  |\n * |     \\2|\n * |4    5\\|\n * ¯¯¯¯¯¯¯¯¯\n *\n * last row faces:\n * _________\n * \\1     0/\n *  \\     /\n *   \\   /\n *    \\2/\n *     ⋁\n */\n\nconst ATTR_UV = 'uv';\nconst ATTR_ORIGINAL_UV = 'originaluv';\nconst ATTR_POSITION = 'position';\n\nfunction tileId(tile) {\n  return `${tile.col}x${tile.row}`;\n}\n\nconst frustum = new Frustum();\nconst projScreenMatrix = new Matrix4();\nconst vertexPosition = new Vector3();\n\n\n/**\n * @summary Adapter for tiled panoramas\n * @memberof PSV.adapters\n * @extends PSV.adapters.AbstractAdapter\n */\nexport class EquirectangularTilesAdapter extends EquirectangularAdapter {\n\n  static id = 'equirectangular-tiles';\n  static supportsDownload = false;\n  static supportsOverlay = false;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    this.psv.config.useXmpData = false;\n\n    /**\n     * @member {PSV.adapters.EquirectangularTilesAdapter.Options}\n     * @private\n     */\n    this.config = {\n      resolution   : 64,\n      showErrorTile: true,\n      baseBlur     : true,\n      ...options,\n    };\n\n    if (!MathUtils.isPowerOfTwo(this.config.resolution)) {\n      throw new PSVError('EquirectangularAdapter resolution must be power of two');\n    }\n\n    this.SPHERE_SEGMENTS = this.config.resolution;\n    this.SPHERE_HORIZONTAL_SEGMENTS = this.SPHERE_SEGMENTS / 2;\n    this.NB_VERTICES_BY_FACE = 6;\n    this.NB_VERTICES_BY_SMALL_FACE = 3;\n    this.NB_VERTICES = 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n      + (this.SPHERE_HORIZONTAL_SEGMENTS - 2) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n    this.NB_GROUPS = this.SPHERE_SEGMENTS * this.SPHERE_HORIZONTAL_SEGMENTS;\n\n    /**\n     * @member {PSV.adapters.Queue}\n     * @private\n     */\n    this.queue = new Queue();\n\n    /**\n     * @type {Object}\n     * @property {int} colSize - size in pixels of a column\n     * @property {int} rowSize - size in pixels of a row\n     * @property {int} facesByCol - number of mesh faces by column\n     * @property {int} facesByRow - number of mesh faces by row\n     * @property {Record<string, boolean>} tiles - loaded tiles\n     * @property {external:THREE.SphereGeometry} geom\n     * @property {external:THREE.MeshBasicMaterial[]} materials\n     * @property {external:THREE.MeshBasicMaterial} errorMaterial\n     * @private\n     */\n    this.prop = {\n      colSize      : 0,\n      rowSize      : 0,\n      facesByCol   : 0,\n      facesByRow   : 0,\n      tiles        : {},\n      geom         : null,\n      materials    : [],\n      errorMaterial: null,\n    };\n\n    /**\n     * @member {external:THREE.ImageLoader}\n     * @private\n     */\n    this.loader = null;\n\n    if (this.psv.config.requestHeaders) {\n      utils.logWarn('EquirectangularTilesAdapter fallbacks to file loader because \"requestHeaders\" where provided. '\n        + 'Consider removing \"requestHeaders\" if you experience performances issues.');\n    }\n    else {\n      this.loader = new ImageLoader();\n      if (this.psv.config.withCredentials) {\n        this.loader.setWithCredentials(true);\n      }\n    }\n\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n\n    this.__cleanup();\n\n    this.prop.errorMaterial?.map?.dispose();\n    this.prop.errorMaterial?.dispose();\n\n    delete this.queue;\n    delete this.loader;\n    delete this.prop.geom;\n    delete this.prop.errorMaterial;\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        this.__refresh();\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @summary Clears loading queue, dispose all materials\n   * @private\n   */\n  __cleanup() {\n    this.queue.clear();\n    this.prop.tiles = {};\n\n    this.prop.materials.forEach((mat) => {\n      mat?.map?.dispose();\n      mat?.dispose();\n    });\n    this.prop.materials.length = 0;\n  }\n\n  /**\n   * @override\n   */\n  supportsTransition(panorama) {\n    return !!panorama.baseUrl;\n  }\n\n  /**\n   * @override\n   */\n  supportsPreload(panorama) {\n    return !!panorama.baseUrl;\n  }\n\n  /**\n   * @override\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Panorama} panorama\n   * @returns {Promise.<PSV.TextureData>}\n   */\n  loadTexture(panorama) {\n    if (typeof panorama !== 'object' || !panorama.width || !panorama.cols || !panorama.rows || !panorama.tileUrl) {\n      return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\n    }\n    if (panorama.cols > this.SPHERE_SEGMENTS) {\n      return Promise.reject(new PSVError(`Panorama cols must not be greater than ${this.SPHERE_SEGMENTS}.`));\n    }\n    if (panorama.rows > this.SPHERE_HORIZONTAL_SEGMENTS) {\n      return Promise.reject(new PSVError(`Panorama rows must not be greater than ${this.SPHERE_HORIZONTAL_SEGMENTS}.`));\n    }\n    if (!MathUtils.isPowerOfTwo(panorama.cols) || !MathUtils.isPowerOfTwo(panorama.rows)) {\n      return Promise.reject(new PSVError('Panorama cols and rows must be powers of 2.'));\n    }\n\n    const panoData = {\n      fullWidth    : panorama.width,\n      fullHeight   : panorama.width / 2,\n      croppedWidth : panorama.width,\n      croppedHeight: panorama.width / 2,\n      croppedX     : 0,\n      croppedY     : 0,\n      poseHeading  : 0,\n      posePitch    : 0,\n      poseRoll     : 0,\n    };\n\n    if (panorama.baseUrl) {\n      return super.loadTexture(panorama.baseUrl, panorama.basePanoData)\n        .then(textureData => ({\n          panorama: panorama,\n          texture : textureData.texture,\n          panoData: panoData,\n        }));\n    }\n    else {\n      return Promise.resolve({ panorama, panoData });\n    }\n  }\n\n  /**\n   * @override\n   */\n  createMesh(scale = 1) {\n    const geometry = new SphereGeometry(\n      CONSTANTS.SPHERE_RADIUS * scale,\n      this.SPHERE_SEGMENTS,\n      this.SPHERE_HORIZONTAL_SEGMENTS,\n      -Math.PI / 2\n    )\n      .scale(-1, 1, 1)\n      .toNonIndexed();\n\n    geometry.clearGroups();\n    let i = 0;\n    let k = 0;\n    // first row\n    for (; i < this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE; i += this.NB_VERTICES_BY_SMALL_FACE) {\n      geometry.addGroup(i, this.NB_VERTICES_BY_SMALL_FACE, k++);\n    }\n    // second to before last rows\n    for (; i < this.NB_VERTICES - this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE; i += this.NB_VERTICES_BY_FACE) {\n      geometry.addGroup(i, this.NB_VERTICES_BY_FACE, k++);\n    }\n    // last row\n    for (; i < this.NB_VERTICES; i += this.NB_VERTICES_BY_SMALL_FACE) {\n      geometry.addGroup(i, this.NB_VERTICES_BY_SMALL_FACE, k++);\n    }\n\n    geometry.setAttribute(ATTR_ORIGINAL_UV, geometry.getAttribute(ATTR_UV).clone());\n\n    return new Mesh(geometry, []);\n  }\n\n  /**\n   * @summary Applies the base texture and starts the loading of tiles\n   * @override\n   */\n  setTexture(mesh, textureData, transition) {\n    const { panorama, texture } = textureData;\n\n    if (transition) {\n      this.__setTexture(mesh, texture);\n      return;\n    }\n\n    this.__cleanup();\n    this.__setTexture(mesh, texture);\n\n    this.prop.materials = mesh.material;\n    this.prop.geom = mesh.geometry;\n    this.prop.geom.setAttribute(ATTR_UV, this.prop.geom.getAttribute(ATTR_ORIGINAL_UV).clone());\n\n    this.prop.colSize = panorama.width / panorama.cols;\n    this.prop.rowSize = panorama.width / 2 / panorama.rows;\n    this.prop.facesByCol = this.SPHERE_SEGMENTS / panorama.cols;\n    this.prop.facesByRow = this.SPHERE_HORIZONTAL_SEGMENTS / panorama.rows;\n\n    // this.psv.renderer.scene.add(createWireFrame(this.prop.geom));\n\n    setTimeout(() => this.__refresh(true));\n  }\n\n  /**\n   * @private\n   */\n  __setTexture(mesh, texture) {\n    let material;\n    if (texture) {\n      material = new MeshBasicMaterial({ map: texture });\n    }\n    else {\n      material = new MeshBasicMaterial({ opacity: 0, transparent: true });\n    }\n\n    for (let i = 0; i < this.NB_GROUPS; i++) {\n      mesh.material.push(material);\n    }\n  }\n\n  /**\n   * @override\n   */\n  setTextureOpacity(mesh, opacity) {\n    mesh.material[0].opacity = opacity;\n    mesh.material[0].transparent = opacity < 1;\n  }\n\n  /**\n   * @summary Compute visible tiles and load them\n   * @param {boolean} [init=false] Indicates initial call\n   * @private\n   */\n  __refresh(init = false) { // eslint-disable-line no-unused-vars\n    if (!this.prop.geom) {\n      return;\n    }\n\n    const camera = this.psv.renderer.camera;\n    camera.updateMatrixWorld();\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n    frustum.setFromProjectionMatrix(projScreenMatrix);\n\n    const panorama = this.psv.config.panorama;\n    const verticesPosition = this.prop.geom.getAttribute(ATTR_POSITION);\n    const tilesToLoad = [];\n\n    for (let col = 0; col < panorama.cols; col++) {\n      for (let row = 0; row < panorama.rows; row++) {\n        // for each tile, find the vertices corresponding to the four corners (three for first and last rows)\n        // if at least one vertex is visible, the tile must be loaded\n        // for larger tiles we also test the four edges centers and the tile center\n\n        const verticesIndex = [];\n\n        if (row === 0) {\n          // bottom-left\n          const v0 = this.prop.facesByRow === 1\n            ? col * this.prop.facesByCol * this.NB_VERTICES_BY_SMALL_FACE + 1\n            : this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + (this.prop.facesByRow - 2) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_FACE + 4;\n\n          // bottom-right\n          const v1 = this.prop.facesByRow === 1\n            ? v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_SMALL_FACE + 1\n            : v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE + 1;\n\n          // top (all vertices are equal)\n          const v2 = 0;\n\n          verticesIndex.push(v0, v1, v2);\n\n          if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n            // bottom-center\n            const v4 = v0 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4);\n          }\n\n          if (this.prop.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\n            // left-center\n            const v6 = v0 - this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            // right-center\n            const v7 = v1 - this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v6, v7);\n          }\n        }\n        else if (row === panorama.rows - 1) {\n          // top-left\n          const v0 = this.prop.facesByRow === 1\n            ? -this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + row * this.prop.facesByRow * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_SMALL_FACE + 1\n            : -this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + row * this.prop.facesByRow * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_FACE + 1;\n\n          // top-right\n          const v1 = this.prop.facesByRow === 1\n            ? v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_SMALL_FACE - 1\n            : v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE - 1;\n\n          // bottom (all vertices are equal)\n          const v2 = this.NB_VERTICES - 1;\n\n          verticesIndex.push(v0, v1, v2);\n\n          if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n            // top-center\n            const v4 = v0 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4);\n          }\n\n          if (this.prop.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\n            // left-center\n            const v6 = v0 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            // right-center\n            const v7 = v1 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v6, v7);\n          }\n        }\n        else {\n          // top-left\n          const v0 = -this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + row * this.prop.facesByRow * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + col * this.prop.facesByCol * this.NB_VERTICES_BY_FACE + 1;\n\n          // bottom-left\n          const v1 = v0 + (this.prop.facesByRow - 1) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE + 3;\n\n          // bottom-right\n          const v2 = v1 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE + 1;\n\n          // top-right\n          const v3 = v0 + (this.prop.facesByCol - 1) * this.NB_VERTICES_BY_FACE - 1;\n\n          verticesIndex.push(v0, v1, v2, v3);\n\n          if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n            // top-center\n            const v4 = v0 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n            // bottom-center\n            const v5 = v1 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4, v5);\n          }\n\n          if (this.prop.facesByRow >= this.SPHERE_HORIZONTAL_SEGMENTS / 4) {\n            // left-center\n            const v6 = v0 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            // right-center\n            const v7 = v3 + this.prop.facesByRow / 2 * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v6, v7);\n\n            if (this.prop.facesByCol >= this.SPHERE_SEGMENTS / 8) {\n              // center-center\n              const v8 = v6 + this.prop.facesByCol / 2 * this.NB_VERTICES_BY_FACE;\n\n              verticesIndex.push(v8);\n            }\n          }\n        }\n\n        // if (init && col === 0 && row === 0) {\n        //   verticesIndex.forEach((vertexIdx) => {\n        //     this.psv.renderer.scene.add(createDot(\n        //       verticesPosition.getX(vertexIdx),\n        //       verticesPosition.getY(vertexIdx),\n        //       verticesPosition.getZ(vertexIdx)\n        //     ));\n        //   });\n        // }\n\n        const vertexVisible = verticesIndex.some((vertexIdx) => {\n          vertexPosition.set(\n            verticesPosition.getX(vertexIdx),\n            verticesPosition.getY(vertexIdx),\n            verticesPosition.getZ(vertexIdx)\n          );\n          vertexPosition.applyEuler(this.psv.renderer.meshContainer.rotation);\n          return frustum.containsPoint(vertexPosition);\n        });\n\n        if (vertexVisible) {\n          let angle = vertexPosition.angleTo(this.psv.prop.direction);\n          if (row === 0 || row === panorama.rows - 1) {\n            angle *= 2; // lower priority to top and bottom tiles\n          }\n          tilesToLoad.push({ col, row, angle });\n        }\n      }\n    }\n\n    this.__loadTiles(tilesToLoad);\n  }\n\n  /**\n   * @summary Loads tiles and change existing tiles priority\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Tile[]} tiles\n   * @private\n   */\n  __loadTiles(tiles) {\n    this.queue.disableAllTasks();\n\n    tiles.forEach((tile) => {\n      const id = tileId(tile);\n\n      if (this.prop.tiles[id]) {\n        this.queue.setPriority(id, tile.angle);\n      }\n      else {\n        this.prop.tiles[id] = true;\n        this.queue.enqueue(new Task(id, tile.angle, task => this.__loadTile(tile, task)));\n      }\n    });\n\n    this.queue.start();\n  }\n\n  /**\n   * @summary Loads and draw a tile\n   * @param {PSV.adapters.EquirectangularTilesAdapter.Tile} tile\n   * @param {PSV.adapters.Task} task\n   * @return {Promise}\n   * @private\n   */\n  __loadTile(tile, task) {\n    const panorama = this.psv.config.panorama;\n    const url = panorama.tileUrl(tile.col, tile.row);\n\n    return this.__loadImage(url)\n      .then((image) => {\n        if (!task.isCancelled()) {\n          const material = new MeshBasicMaterial({ map: utils.createTexture(image) });\n          this.__swapMaterial(tile.col, tile.row, material);\n          this.psv.needsUpdate();\n        }\n      })\n      .catch(() => {\n        if (!task.isCancelled() && this.config.showErrorTile) {\n          if (!this.prop.errorMaterial) {\n            this.prop.errorMaterial = buildErrorMaterial(this.prop.colSize, this.prop.rowSize);\n          }\n          this.__swapMaterial(tile.col, tile.row, this.prop.errorMaterial);\n          this.psv.needsUpdate();\n        }\n      });\n  }\n\n  /**\n   * @private\n   */\n  __loadImage(url) {\n    if (this.loader) {\n      return new Promise((resolve, reject) => {\n        this.loader.load(url, resolve, undefined, reject);\n      });\n    }\n    else {\n      return this.psv.textureLoader.loadImage(url);\n    }\n  }\n\n  /**\n   * @summary Applies a new texture to the faces\n   * @param {int} col\n   * @param {int} row\n   * @param {external:THREE.MeshBasicMaterial} material\n   * @private\n   */\n  __swapMaterial(col, row, material) {\n    const uvs = this.prop.geom.getAttribute(ATTR_UV);\n\n    for (let c = 0; c < this.prop.facesByCol; c++) {\n      for (let r = 0; r < this.prop.facesByRow; r++) {\n        // position of the face (two triangles of the same square)\n        const faceCol = col * this.prop.facesByCol + c;\n        const faceRow = row * this.prop.facesByRow + r;\n        const isFirstRow = faceRow === 0;\n        const isLastRow = faceRow === (this.SPHERE_HORIZONTAL_SEGMENTS - 1);\n\n        // first vertex for this face (3 or 6 vertices in total)\n        let firstVertex;\n        if (isFirstRow) {\n          firstVertex = faceCol * this.NB_VERTICES_BY_SMALL_FACE;\n        }\n        else if (isLastRow) {\n          firstVertex = this.NB_VERTICES\n            - this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + faceCol * this.NB_VERTICES_BY_SMALL_FACE;\n        }\n        else {\n          firstVertex = this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_SMALL_FACE\n            + (faceRow - 1) * this.SPHERE_SEGMENTS * this.NB_VERTICES_BY_FACE\n            + faceCol * this.NB_VERTICES_BY_FACE;\n        }\n\n        // swap material\n        const matIndex = this.prop.geom.groups.find(g => g.start === firstVertex).materialIndex;\n        this.prop.materials[matIndex] = material;\n\n        // define new uvs\n        const top = 1 - r / this.prop.facesByRow;\n        const bottom = 1 - (r + 1) / this.prop.facesByRow;\n        const left = c / this.prop.facesByCol;\n        const right = (c + 1) / this.prop.facesByCol;\n\n        if (isFirstRow) {\n          uvs.setXY(firstVertex, (left + right) / 2, top);\n          uvs.setXY(firstVertex + 1, left, bottom);\n          uvs.setXY(firstVertex + 2, right, bottom);\n        }\n        else if (isLastRow) {\n          uvs.setXY(firstVertex, right, top);\n          uvs.setXY(firstVertex + 1, left, top);\n          uvs.setXY(firstVertex + 2, (left + right) / 2, bottom);\n        }\n        else {\n          uvs.setXY(firstVertex, right, top);\n          uvs.setXY(firstVertex + 1, left, top);\n          uvs.setXY(firstVertex + 2, right, bottom);\n          uvs.setXY(firstVertex + 3, left, top);\n          uvs.setXY(firstVertex + 4, left, bottom);\n          uvs.setXY(firstVertex + 5, right, bottom);\n        }\n      }\n    }\n\n    uvs.needsUpdate = true;\n  }\n\n  /**\n   * @summary Create the texture for the base image\n   * @param {HTMLImageElement} img\n   * @return {external:THREE.Texture}\n   * @private\n   */\n  __createBaseTexture(img) {\n    if (img.width !== img.height * 2) {\n      utils.logWarn('Invalid base image, the width should be twice the height');\n    }\n\n    return createBaseTexture(img, this.config.baseBlur, w => w / 2);\n  }\n\n}\n"],"names":["Task","id","priority","fn","status","STATUS","PENDING","start","RUNNING","then","DONE","ERROR","cancel","CANCELLED","isCancelled","DISABLED","Queue","concurency","runningTasks","tasks","enqueue","task","clear","Object","values","forEach","setPriority","taskId","disableAllTasks","keys","length","nextTask","filter","sort","a","b","pop","buildErrorMaterial","width","height","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","texture","CanvasTexture","MeshBasicMaterial","map","createBaseTexture","img","blur","getHeight","SYSTEM","maxTextureWidth","ratio","Math","min","getMaxCanvasWidth","buffer","drawImage","utils","createTexture","ATTR_UV","ATTR_ORIGINAL_UV","ATTR_POSITION","tileId","tile","col","row","frustum","Frustum","projScreenMatrix","Matrix4","vertexPosition","Vector3","EquirectangularTilesAdapter","psv","options","config","useXmpData","resolution","showErrorTile","baseBlur","MathUtils","isPowerOfTwo","PSVError","SPHERE_SEGMENTS","SPHERE_HORIZONTAL_SEGMENTS","NB_VERTICES_BY_FACE","NB_VERTICES_BY_SMALL_FACE","NB_VERTICES","NB_GROUPS","queue","prop","colSize","rowSize","facesByCol","facesByRow","tiles","geom","materials","errorMaterial","loader","requestHeaders","logWarn","ImageLoader","withCredentials","setWithCredentials","on","CONSTANTS","EVENTS","POSITION_UPDATED","ZOOM_UPDATED","destroy","off","__cleanup","dispose","handleEvent","e","type","__refresh","mat","supportsTransition","panorama","baseUrl","supportsPreload","loadTexture","cols","rows","tileUrl","Promise","reject","panoData","fullWidth","fullHeight","croppedWidth","croppedHeight","croppedX","croppedY","poseHeading","posePitch","poseRoll","basePanoData","textureData","resolve","createMesh","scale","geometry","SphereGeometry","SPHERE_RADIUS","PI","toNonIndexed","clearGroups","i","k","addGroup","setAttribute","getAttribute","clone","Mesh","setTexture","mesh","transition","__setTexture","material","setTimeout","opacity","transparent","push","setTextureOpacity","init","camera","renderer","updateMatrixWorld","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","verticesPosition","tilesToLoad","verticesIndex","v0","v1","v2","v4","v6","v7","v3","v5","v8","vertexVisible","some","vertexIdx","set","getX","getY","getZ","applyEuler","meshContainer","rotation","containsPoint","angle","angleTo","direction","__loadTiles","__loadTile","url","__loadImage","image","__swapMaterial","needsUpdate","catch","load","undefined","textureLoader","loadImage","uvs","c","r","faceCol","faceRow","isFirstRow","isLastRow","firstVertex","matIndex","groups","find","g","materialIndex","top","bottom","left","right","setXY","__createBaseTexture","w","EquirectangularAdapter","supportsDownload","supportsOverlay"],"mappings":"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"}