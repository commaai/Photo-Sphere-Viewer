{"version":3,"file":"cubemap-tiles.js","sources":["../../src/adapters/shared/Task.js","../../src/adapters/shared/Queue.js","../../src/adapters/shared/tiles-utils.js","../../src/adapters/cubemap-tiles/index.js"],"sourcesContent":["/**\n * @summary Loading task\n * @memberOf PSV.adapters\n * @private\n */\nexport class Task {\n\n  static STATUS = {\n    DISABLED : -1,\n    PENDING  : 0,\n    RUNNING  : 1,\n    CANCELLED: 2,\n    DONE     : 3,\n    ERROR    : 4,\n  };\n\n  /**\n   * @param {string} id\n   * @param {number} priority\n   * @param {function(Task): Promise} fn\n   */\n  constructor(id, priority, fn) {\n    this.id = id;\n    this.priority = priority;\n    this.fn = fn;\n    this.status = Task.STATUS.PENDING;\n  }\n\n  start() {\n    this.status = Task.STATUS.RUNNING;\n    return this.fn(this)\n      .then(() => {\n        this.status = Task.STATUS.DONE;\n      }, () => {\n        this.status = Task.STATUS.ERROR;\n      });\n  }\n\n  cancel() {\n    this.status = Task.STATUS.CANCELLED;\n  }\n\n  isCancelled() {\n    return this.status === Task.STATUS.CANCELLED;\n  }\n\n}\n","import { Task } from './Task';\n\n/**\n * @summary Loading queue\n * @memberOf PSV.adapters\n * @private\n */\nexport class Queue {\n\n  /**\n   * @param {int} concurency\n   */\n  constructor(concurency = 4) {\n    this.concurency = concurency;\n    this.runningTasks = {};\n    this.tasks = {};\n  }\n\n  enqueue(task) {\n    this.tasks[task.id] = task;\n  }\n\n  clear() {\n    Object.values(this.tasks).forEach(task => task.cancel());\n    this.tasks = {};\n    this.runningTasks = {};\n  }\n\n  setPriority(taskId, priority) {\n    const task = this.tasks[taskId];\n    if (task) {\n      task.priority = priority;\n      if (task.status === Task.STATUS.DISABLED) {\n        task.status = Task.STATUS.PENDING;\n      }\n    }\n  }\n\n  disableAllTasks() {\n    Object.values(this.tasks).forEach((task) => {\n      task.status = Task.STATUS.DISABLED;\n    });\n  }\n\n  start() {\n    if (Object.keys(this.runningTasks).length >= this.concurency) {\n      return;\n    }\n\n    const nextTask = Object.values(this.tasks)\n      .filter(task => task.status === Task.STATUS.PENDING)\n      .sort((a, b) => b.priority - a.priority)\n      .pop();\n\n    if (nextTask) {\n      this.runningTasks[nextTask.id] = true;\n\n      nextTask.start()\n        .then(() => {\n          if (!nextTask.isCancelled()) {\n            delete this.tasks[nextTask.id];\n            delete this.runningTasks[nextTask.id];\n            this.start();\n          }\n        });\n\n      this.start(); // start tasks until max concurrency is reached\n    }\n  }\n\n}\n","import { CanvasTexture, LineSegments, Mesh, MeshBasicMaterial, SphereGeometry, WireframeGeometry } from 'three';\nimport { SYSTEM, utils } from '../..';\n\n/**\n * @summary Generates an material for errored tiles\n * @memberOf PSV.adapters\n * @return {external:THREE.MeshBasicMaterial}\n * @private\n */\nexport function buildErrorMaterial(width, height) {\n  const canvas = document.createElement('canvas');\n  canvas.width = width;\n  canvas.height = height;\n\n  const ctx = canvas.getContext('2d');\n\n  ctx.fillStyle = '#333';\n  ctx.fillRect(0, 0, canvas.width, canvas.height);\n  ctx.font = `${canvas.width / 5}px serif`;\n  ctx.fillStyle = '#a22';\n  ctx.textAlign = 'center';\n  ctx.textBaseline = 'middle';\n  ctx.fillText('âš ', canvas.width / 2, canvas.height / 2);\n\n  const texture = new CanvasTexture(canvas);\n  return new MeshBasicMaterial({ map: texture });\n}\n\n/**\n * @summary Create the texture for the base image\n * @memberOf PSV.adapters\n * @param {HTMLImageElement} img\n * @param {boolean} blur\n * @param {function} getHeight\n * @return {external:THREE.Texture}\n * @private\n */\nexport function createBaseTexture(img, blur, getHeight) {\n  if (blur || img.width > SYSTEM.maxTextureWidth) {\n    const ratio = Math.min(1, SYSTEM.getMaxCanvasWidth() / img.width);\n\n    const buffer = document.createElement('canvas');\n    buffer.width = img.width * ratio;\n    buffer.height = getHeight(img.width);\n\n    const ctx = buffer.getContext('2d');\n    if (blur) {\n      ctx.filter = 'blur(1px)';\n    }\n    ctx.drawImage(img, 0, 0, buffer.width, buffer.height);\n\n    return utils.createTexture(buffer);\n  }\n\n  return utils.createTexture(img);\n}\n\n/**\n * @summary Creates a wireframe geometry, for debug\n * @memberOf PSV.adapters\n * @param {THREE.BufferGeometry} geometry\n * @return {THREE.Object3D}\n * @private\n */\nexport function createWireFrame(geometry) {\n  const wireframe = new WireframeGeometry(geometry);\n  const line = new LineSegments(wireframe);\n  line.material.depthTest = false;\n  line.material.opacity = 0.25;\n  line.material.transparent = true;\n  return line;\n}\n\n/**\n * @summary Creates a small red sphere, for debug\n * @memberOf PSV.adapters\n * @return {THREE.Object3D}\n * @private\n */\nexport function createDot(x, y, z) {\n  const geom = new SphereGeometry(0.1);\n  const material = new MeshBasicMaterial({ color: 0xff0000 });\n  const mesh = new Mesh(geom, material);\n  mesh.position.set(x, y, z);\n  return mesh;\n}\n","import {\n  BoxGeometry,\n  Frustum,\n  ImageLoader,\n  MathUtils,\n  Matrix4,\n  Mesh,\n  MeshBasicMaterial,\n  Vector2,\n  Vector3\n} from 'three';\nimport { CONSTANTS, PSVError, utils } from '../..';\nimport { CUBE_HASHMAP, CubemapAdapter } from '../cubemap';\nimport { Queue } from '../shared/Queue';\nimport { Task } from '../shared/Task';\nimport { buildErrorMaterial, createBaseTexture } from '../shared/tiles-utils';\n\nif (!CubemapAdapter) {\n  throw new PSVError('CubemapAdapter is missing, please load cubemap.js before cubemap-tiles.js');\n}\n\n\n/**\n * @callback TileUrl\n * @summary Function called to build a tile url\n * @memberOf PSV.adapters.CubemapTilesAdapter\n * @param {'left'|'front'|'right'|'back'|'top'|'bottom'} face\n * @param {int} col\n * @param {int} row\n * @returns {string}\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Panorama\n * @summary Configuration of a tiled cubemap\n * @property {PSV.adapters.CubemapAdapter.Cubemap} [baseUrl] - low resolution panorama loaded before tiles\n * @property {int} faceSize - size of a face\n * @property {int} nbTiles - number of tiles on a side of a face\n * @property {PSV.adapters.CubemapTilesAdapter.TileUrl} tileUrl - function to build a tile url\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Options\n * @property {boolean} [flipTopBottom=false] - set to true if the top and bottom faces are not correctly oriented\n * @property {boolean} [showErrorTile=true] - shows a warning sign on tiles that cannot be loaded\n * @property {boolean} [baseBlur=true] - applies a blur to the low resolution panorama\n */\n\n/**\n * @typedef {Object} PSV.adapters.CubemapTilesAdapter.Tile\n * @private\n * @property {int} face\n * @property {int} col\n * @property {int} row\n * @property {float} angle\n */\n\n\nconst CUBE_SEGMENTS = 16;\nconst NB_VERTICES_BY_FACE = 6;\nconst NB_VERTICES_BY_PLANE = NB_VERTICES_BY_FACE * CUBE_SEGMENTS * CUBE_SEGMENTS;\nconst NB_VERTICES = 6 * NB_VERTICES_BY_PLANE;\nconst NB_GROUPS_BY_FACE = CUBE_SEGMENTS * CUBE_SEGMENTS;\n\nconst ATTR_UV = 'uv';\nconst ATTR_ORIGINAL_UV = 'originaluv';\nconst ATTR_POSITION = 'position';\n\nfunction tileId(tile) {\n  return `${tile.face}:${tile.col}x${tile.row}`;\n}\n\nconst frustum = new Frustum();\nconst projScreenMatrix = new Matrix4();\nconst vertexPosition = new Vector3();\n\n/**\n * @summary Adapter for tiled cubemaps\n * @memberof PSV.adapters\n * @extends PSV.adapters.AbstractAdapter\n */\nexport class CubemapTilesAdapter extends CubemapAdapter {\n\n  static id = 'cubemap-tiles';\n  static supportsDownload = false;\n  static supportsOverlay = false;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.adapters.CubemapTilesAdapter.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @member {PSV.adapters.CubemapTilesAdapter.Options}\n     * @private\n     */\n    this.config = {\n      flipTopBottom: false,\n      showErrorTile: true,\n      baseBlur     : true,\n      ...options,\n    };\n\n    /**\n     * @member {PSV.adapters.Queue}\n     * @private\n     */\n    this.queue = new Queue();\n\n    /**\n     * @type {Object}\n     * @property {int} tileSize - size in pixels of a tile\n     * @property {int} facesByTile - number of mesh faces by tile\n     * @property {Record<string, boolean>} tiles - loaded tiles\n     * @property {external:THREE.BoxGeometry} geom\n     * @property {external:THREE.MeshBasicMaterial[]} materials\n     * @property {external:THREE.MeshBasicMaterial} errorMaterial\n     * @private\n     */\n    this.prop = {\n      tileSize     : 0,\n      facesByTile  : 0,\n      tiles        : {},\n      geom         : null,\n      materials    : [],\n      errorMaterial: null,\n    };\n\n    /**\n     * @member {external:THREE.ImageLoader}\n     * @private\n     */\n    this.loader = null;\n\n    if (this.psv.config.requestHeaders) {\n      utils.logWarn('CubemapTilesAdapter fallbacks to file loader because \"requestHeaders\" where provided. '\n        + 'Consider removing \"requestHeaders\" if you experience performances issues.');\n    }\n    else {\n      this.loader = new ImageLoader();\n      if (this.psv.config.withCredentials) {\n        this.loader.setWithCredentials(true);\n      }\n    }\n\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n\n    this.__cleanup();\n\n    this.prop.errorMaterial?.map?.dispose();\n    this.prop.errorMaterial?.dispose();\n\n    delete this.queue;\n    delete this.loader;\n    delete this.prop.geom;\n    delete this.prop.errorMaterial;\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        this.__refresh();\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @summary Clears loading queue, dispose all materials\n   * @private\n   */\n  __cleanup() {\n    this.queue.clear();\n    this.prop.tiles = {};\n\n    this.prop.materials.forEach((mat) => {\n      mat?.map?.dispose();\n      mat?.dispose();\n    });\n    this.prop.materials.length = 0;\n  }\n\n  /**\n   * @override\n   */\n  supportsTransition(panorama) {\n    return !!panorama.baseUrl;\n  }\n\n  /**\n   * @override\n   */\n  supportsPreload(panorama) {\n    return !!panorama.baseUrl;\n  }\n\n  /**\n   * @override\n   * @param {PSV.adapters.CubemapTilesAdapter.Panorama} panorama\n   * @returns {Promise.<PSV.TextureData>}\n   */\n  loadTexture(panorama) {\n    if (typeof panorama !== 'object' || !panorama.faceSize || !panorama.nbTiles || !panorama.tileUrl) {\n      return Promise.reject(new PSVError('Invalid panorama configuration, are you using the right adapter?'));\n    }\n    if (panorama.nbTiles > CUBE_SEGMENTS) {\n      return Promise.reject(new PSVError(`Panorama nbTiles must not be greater than ${CUBE_SEGMENTS}.`));\n    }\n    if (!MathUtils.isPowerOfTwo(panorama.nbTiles)) {\n      return Promise.reject(new PSVError('Panorama nbTiles must be power of 2.'));\n    }\n\n    if (panorama.baseUrl) {\n      return super.loadTexture(panorama.baseUrl)\n        .then(textureData => ({\n          panorama: panorama,\n          texture : textureData.texture,\n        }));\n    }\n    else {\n      return Promise.resolve({ panorama });\n    }\n  }\n\n  /**\n   * @override\n   */\n  createMesh(scale = 1) {\n    const cubeSize = CONSTANTS.SPHERE_RADIUS * 2 * scale;\n    const geometry = new BoxGeometry(cubeSize, cubeSize, cubeSize, CUBE_SEGMENTS, CUBE_SEGMENTS, CUBE_SEGMENTS)\n      .scale(1, 1, -1)\n      .toNonIndexed();\n\n    geometry.clearGroups();\n    for (let i = 0, k = 0; i < NB_VERTICES; i += NB_VERTICES_BY_FACE) {\n      geometry.addGroup(i, NB_VERTICES_BY_FACE, k++);\n    }\n\n    geometry.setAttribute(ATTR_ORIGINAL_UV, geometry.getAttribute(ATTR_UV).clone());\n\n    return new Mesh(geometry, []);\n  }\n\n  /**\n   * @summary Applies the base texture and starts the loading of tiles\n   * @override\n   */\n  setTexture(mesh, textureData, transition) {\n    const { panorama, texture } = textureData;\n\n    if (transition) {\n      this.__setTexture(mesh, texture);\n      return;\n    }\n\n    this.__cleanup();\n    this.__setTexture(mesh, texture);\n\n    this.prop.materials = mesh.material;\n    this.prop.geom = mesh.geometry;\n    this.prop.geom.setAttribute(ATTR_UV, this.prop.geom.getAttribute(ATTR_ORIGINAL_UV).clone());\n\n    this.prop.tileSize = panorama.faceSize / panorama.nbTiles;\n    this.prop.facesByTile = CUBE_SEGMENTS / panorama.nbTiles;\n\n    // this.psv.renderer.scene.add(createWireFrame(this.prop.geom));\n\n    setTimeout(() => this.__refresh(true));\n  }\n\n  /**\n   * @private\n   */\n  __setTexture(mesh, texture) {\n    for (let i = 0; i < 6; i++) {\n      let material;\n      if (texture) {\n        if (this.config.flipTopBottom && (i === 2 || i === 3)) {\n          texture[i].center = new Vector2(0.5, 0.5);\n          texture[i].rotation = Math.PI;\n        }\n\n        material = new MeshBasicMaterial({ map: texture[i] });\n      }\n      else {\n        material = new MeshBasicMaterial({ opacity: 0, transparent: true });\n      }\n\n      for (let j = 0; j < NB_GROUPS_BY_FACE; j++) {\n        mesh.material.push(material);\n      }\n    }\n  }\n\n  /**\n   * @override\n   */\n  setTextureOpacity(mesh, opacity) {\n    for (let i = 0; i < 6; i++) {\n      mesh.material[i * NB_GROUPS_BY_FACE].opacity = opacity;\n      mesh.material[i * NB_GROUPS_BY_FACE].transparent = opacity < 1;\n    }\n  }\n\n  /**\n   * @summary Compute visible tiles and load them\n   * @private\n   */\n  __refresh(init = false) { // eslint-disable-line no-unused-vars\n    if (!this.prop.geom) {\n      return;\n    }\n\n    const camera = this.psv.renderer.camera;\n    camera.updateMatrixWorld();\n    projScreenMatrix.multiplyMatrices(camera.projectionMatrix, camera.matrixWorldInverse);\n    frustum.setFromProjectionMatrix(projScreenMatrix);\n\n    const panorama = this.psv.config.panorama;\n    const verticesPosition = this.prop.geom.getAttribute(ATTR_POSITION);\n    const tilesToLoad = [];\n\n    for (let face = 0; face < 6; face++) {\n      for (let col = 0; col < panorama.nbTiles; col++) {\n        for (let row = 0; row < panorama.nbTiles; row++) {\n          // for each tile, find the vertices corresponding to the four corners\n          // if at least one vertex is visible, the tile must be loaded\n          // for larger tiles we also test the four edges centers and the tile center\n          const verticesIndex = [];\n\n          // top-left\n          const v0 = face * NB_VERTICES_BY_PLANE\n            + row * this.prop.facesByTile * CUBE_SEGMENTS * NB_VERTICES_BY_FACE\n            + col * this.prop.facesByTile * NB_VERTICES_BY_FACE;\n\n          // bottom-left\n          const v1 = v0 + CUBE_SEGMENTS * NB_VERTICES_BY_FACE * (this.prop.facesByTile - 1) + 1;\n\n          // bottom-right\n          const v2 = v1 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 3;\n\n          // top-right\n          const v3 = v0 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 1;\n\n          verticesIndex.push(v0, v1, v2, v3);\n\n          if (this.prop.facesByTile >= CUBE_SEGMENTS / 2) {\n            // top-center\n            const v4 = v0 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE - 1;\n\n            // bottom-center\n            const v5 = v1 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE - 3;\n\n            // left-center\n            const v6 = v0 + CUBE_SEGMENTS * NB_VERTICES_BY_FACE * (this.prop.facesByTile / 2 - 1) + 1;\n\n            // right-center\n            const v7 = v6 + this.prop.facesByTile * NB_VERTICES_BY_FACE - 3;\n\n            // center-center\n            const v8 = v6 + this.prop.facesByTile / 2 * NB_VERTICES_BY_FACE;\n\n            verticesIndex.push(v4, v5, v6, v7, v8);\n          }\n\n          // if (init && face === 5 && col === 0 && row === 0) {\n          //   verticesIndex.forEach((vertexIdx) => {\n          //     this.psv.renderer.scene.add(createDot(\n          //       verticesPosition.getX(vertexIdx),\n          //       verticesPosition.getY(vertexIdx),\n          //       verticesPosition.getZ(vertexIdx)\n          //     ));\n          //   });\n          // }\n\n          const vertexVisible = verticesIndex.some((vertexIdx) => {\n            vertexPosition.set(\n              verticesPosition.getX(vertexIdx),\n              verticesPosition.getY(vertexIdx),\n              verticesPosition.getZ(vertexIdx)\n            );\n            vertexPosition.applyEuler(this.psv.renderer.meshContainer.rotation);\n            return frustum.containsPoint(vertexPosition);\n          });\n\n          if (vertexVisible) {\n            const angle = vertexPosition.angleTo(this.psv.prop.direction);\n            tilesToLoad.push({ face, col, row, angle });\n          }\n        }\n      }\n    }\n\n    this.__loadTiles(tilesToLoad);\n  }\n\n  /**\n   * @summary Loads tiles and change existing tiles priority\n   * @param {PSV.adapters.CubemapTilesAdapter.Tile[]} tiles\n   * @private\n   */\n  __loadTiles(tiles) {\n    this.queue.disableAllTasks();\n\n    tiles.forEach((tile) => {\n      const id = tileId(tile);\n\n      if (this.prop.tiles[id]) {\n        this.queue.setPriority(id, tile.angle);\n      }\n      else {\n        this.prop.tiles[id] = true;\n        this.queue.enqueue(new Task(id, tile.angle, task => this.__loadTile(tile, task)));\n      }\n    });\n\n    this.queue.start();\n  }\n\n  /**\n   * @summary Loads and draw a tile\n   * @param {PSV.adapters.CubemapTilesAdapter.Tile} tile\n   * @param {PSV.adapters.Task} task\n   * @return {Promise}\n   * @private\n   */\n  __loadTile(tile, task) {\n    const panorama = this.psv.config.panorama;\n\n    let { col, row } = tile;\n    if (this.config.flipTopBottom && (tile.face === 2 || tile.face === 3)) {\n      col = panorama.nbTiles - col - 1;\n      row = panorama.nbTiles - row - 1;\n    }\n    const url = panorama.tileUrl(CUBE_HASHMAP[tile.face], col, row);\n\n    return this.__loadImage(url)\n      .then((image) => {\n        if (!task.isCancelled()) {\n          const material = new MeshBasicMaterial({ map: utils.createTexture(image) });\n          this.__swapMaterial(tile.face, tile.col, tile.row, material);\n          this.psv.needsUpdate();\n        }\n      })\n      .catch(() => {\n        if (!task.isCancelled() && this.config.showErrorTile) {\n          if (!this.prop.errorMaterial) {\n            this.prop.errorMaterial = buildErrorMaterial(this.prop.tileSize, this.prop.tileSize);\n          }\n          this.__swapMaterial(tile.face, tile.col, tile.row, this.prop.errorMaterial);\n          this.psv.needsUpdate();\n        }\n      });\n  }\n\n  /**\n   * @private\n   */\n  __loadImage(url) {\n    if (this.loader) {\n      return new Promise((resolve, reject) => {\n        this.loader.load(url, resolve, undefined, reject);\n      });\n    }\n    else {\n      return this.psv.textureLoader.loadImage(url);\n    }\n  }\n\n  /**\n   * @summary Applies a new texture to the faces\n   * @param {int} face\n   * @param {int} col\n   * @param {int} row\n   * @param {external:THREE.MeshBasicMaterial} material\n   * @private\n   */\n  __swapMaterial(face, col, row, material) {\n    const uvs = this.prop.geom.getAttribute(ATTR_UV);\n\n    for (let c = 0; c < this.prop.facesByTile; c++) {\n      for (let r = 0; r < this.prop.facesByTile; r++) {\n        // position of the face (two triangles of the same square)\n        const faceCol = col * this.prop.facesByTile + c;\n        const faceRow = row * this.prop.facesByTile + r;\n\n        // first vertex for this face (6 vertices in total)\n        const firstVertex = NB_VERTICES_BY_PLANE * face + 6 * (CUBE_SEGMENTS * faceRow + faceCol);\n\n        // swap material\n        const matIndex = this.prop.geom.groups.find(g => g.start === firstVertex).materialIndex;\n        this.prop.materials[matIndex] = material;\n\n        // define new uvs\n        let top = 1 - r / this.prop.facesByTile;\n        let bottom = 1 - (r + 1) / this.prop.facesByTile;\n        let left = c / this.prop.facesByTile;\n        let right = (c + 1) / this.prop.facesByTile;\n\n        if (this.config.flipTopBottom && (face === 2 || face === 3)) {\n          top = 1 - top;\n          bottom = 1 - bottom;\n          left = 1 - left;\n          right = 1 - right;\n        }\n\n        uvs.setXY(firstVertex, left, top);\n        uvs.setXY(firstVertex + 1, left, bottom);\n        uvs.setXY(firstVertex + 2, right, top);\n        uvs.setXY(firstVertex + 3, left, bottom);\n        uvs.setXY(firstVertex + 4, right, bottom);\n        uvs.setXY(firstVertex + 5, right, top);\n      }\n    }\n\n    uvs.needsUpdate = true;\n  }\n\n  /**\n   * @summary Create the texture for the base image\n   * @param {HTMLImageElement} img\n   * @return {external:THREE.Texture}\n   * @override\n   * @private\n   */\n  __createCubemapTexture(img) {\n    if (img.width !== img.height) {\n      utils.logWarn('Invalid base image, the width should equals the height');\n    }\n\n    return createBaseTexture(img, this.config.baseBlur, w => w);\n  }\n\n}\n"],"names":["Task","id","priority","fn","status","STATUS","PENDING","start","RUNNING","then","DONE","ERROR","cancel","CANCELLED","isCancelled","DISABLED","Queue","concurency","runningTasks","tasks","enqueue","task","clear","Object","values","forEach","setPriority","taskId","disableAllTasks","keys","length","nextTask","filter","sort","a","b","pop","buildErrorMaterial","width","height","canvas","document","createElement","ctx","getContext","fillStyle","fillRect","font","textAlign","textBaseline","fillText","texture","CanvasTexture","MeshBasicMaterial","map","createBaseTexture","img","blur","getHeight","SYSTEM","maxTextureWidth","ratio","Math","min","getMaxCanvasWidth","buffer","drawImage","utils","createTexture","CubemapAdapter","PSVError","CUBE_SEGMENTS","NB_VERTICES_BY_FACE","NB_VERTICES_BY_PLANE","NB_VERTICES","NB_GROUPS_BY_FACE","ATTR_UV","ATTR_ORIGINAL_UV","ATTR_POSITION","tileId","tile","face","col","row","frustum","Frustum","projScreenMatrix","Matrix4","vertexPosition","Vector3","CubemapTilesAdapter","psv","options","config","flipTopBottom","showErrorTile","baseBlur","queue","prop","tileSize","facesByTile","tiles","geom","materials","errorMaterial","loader","requestHeaders","logWarn","ImageLoader","withCredentials","setWithCredentials","on","CONSTANTS","EVENTS","POSITION_UPDATED","ZOOM_UPDATED","destroy","off","__cleanup","dispose","handleEvent","e","type","__refresh","mat","supportsTransition","panorama","baseUrl","supportsPreload","loadTexture","faceSize","nbTiles","tileUrl","Promise","reject","MathUtils","isPowerOfTwo","textureData","resolve","createMesh","scale","cubeSize","SPHERE_RADIUS","geometry","BoxGeometry","toNonIndexed","clearGroups","i","k","addGroup","setAttribute","getAttribute","clone","Mesh","setTexture","mesh","transition","__setTexture","material","setTimeout","center","Vector2","rotation","PI","opacity","transparent","j","push","setTextureOpacity","init","camera","renderer","updateMatrixWorld","multiplyMatrices","projectionMatrix","matrixWorldInverse","setFromProjectionMatrix","verticesPosition","tilesToLoad","verticesIndex","v0","v1","v2","v3","v4","v5","v6","v7","v8","vertexVisible","some","vertexIdx","set","getX","getY","getZ","applyEuler","meshContainer","containsPoint","angle","angleTo","direction","__loadTiles","__loadTile","url","CUBE_HASHMAP","__loadImage","image","__swapMaterial","needsUpdate","catch","load","undefined","textureLoader","loadImage","uvs","c","r","faceCol","faceRow","firstVertex","matIndex","groups","find","g","materialIndex","top","bottom","left","right","setXY","__createCubemapTexture","w","supportsDownload","supportsOverlay"],"mappings":"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"}