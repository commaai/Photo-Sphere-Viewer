{"version":3,"file":"visible-range.js","sources":["../../src/plugins/visible-range/index.js"],"sourcesContent":["import { MathUtils } from 'three';\nimport { AbstractPlugin, CONSTANTS, utils } from '../..';\n\n\n/**\n * @typedef {Object} PSV.plugins.VisibleRangePlugin.Options\n * @property {double[]|string[]} [latitudeRange] - latitude range as two angles\n * @property {double[]|string[]} [longitudeRange] - longitude range as two angles\n * @property {boolean} [usePanoData=false] - use panoData as visible range, you can also manually call `setRangesFromPanoData`\n */\n\nconst EPS = 0.000001;\n\n/**\n * @summary Locks visible longitude and/or latitude\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport class VisibleRangePlugin extends AbstractPlugin {\n\n  static id = 'visible-range';\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.plugins.VisibleRangePlugin.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @member {PSV.plugins.VisibleRangePlugin.Options}\n     * @private\n     */\n    this.config = {\n      latitudeRange : null,\n      longitudeRange: null,\n      usePanoData   : false,\n      ...options,\n    };\n  }\n\n  /**\n   * @package\n   */\n  init() {\n    super.init();\n\n    this.psv.on(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n    this.psv.on(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.on(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n    this.psv.on(CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION, this);\n    this.psv.on(CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION, this);\n\n    this.setLatitudeRange(this.config.latitudeRange);\n    this.setLongitudeRange(this.config.longitudeRange);\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n    this.psv.off(CONSTANTS.EVENTS.POSITION_UPDATED, this);\n    this.psv.off(CONSTANTS.EVENTS.ZOOM_UPDATED, this);\n    this.psv.off(CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION, this);\n    this.psv.off(CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION, this);\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  // eslint-disable-next-line consistent-return\n  handleEvent(e) {\n    let sidesReached;\n    let rangedPosition;\n    let currentPosition;\n\n    switch (e.type) {\n      case CONSTANTS.CHANGE_EVENTS.GET_ANIMATE_POSITION:\n      case CONSTANTS.CHANGE_EVENTS.GET_ROTATE_POSITION:\n        currentPosition = e.value;\n        ({ rangedPosition } = this.applyRanges(currentPosition));\n\n        return rangedPosition;\n\n      case CONSTANTS.EVENTS.POSITION_UPDATED:\n        currentPosition = e.args[0];\n        ({ sidesReached, rangedPosition } = this.applyRanges(currentPosition));\n\n        if ((sidesReached.left || sidesReached.right) && this.psv.isAutorotateEnabled()) {\n          this.__reverseAutorotate(sidesReached.left, sidesReached.right);\n        }\n        else if (Math.abs(currentPosition.longitude - rangedPosition.longitude) > EPS\n          || Math.abs(currentPosition.latitude - rangedPosition.latitude) > EPS) {\n          this.psv.dynamics.position.setValue(rangedPosition);\n        }\n        break;\n\n      case CONSTANTS.EVENTS.PANORAMA_LOADED:\n        if (this.config.usePanoData) {\n          this.setRangesFromPanoData();\n        }\n        break;\n\n      case CONSTANTS.EVENTS.ZOOM_UPDATED:\n        currentPosition = this.psv.getPosition();\n        ({ rangedPosition } = this.applyRanges(currentPosition));\n\n        if (Math.abs(currentPosition.longitude - rangedPosition.longitude) > EPS\n          || Math.abs(currentPosition.latitude - rangedPosition.latitude) > EPS) {\n          this.psv.rotate(rangedPosition);\n        }\n        break;\n\n      default:\n    }\n  }\n\n  /**\n   * @summary Changes the latitude range\n   * @param {double[]|string[]} range - latitude range as two angles\n   */\n  setLatitudeRange(range) {\n    // latitude range must have two values\n    if (range && range.length !== 2) {\n      utils.logWarn('latitude range must have exactly two elements');\n      range = null;\n    }\n    // latitude range must be ordered\n    else if (range && range[0] > range[1]) {\n      utils.logWarn('latitude range values must be ordered');\n      range = [range[1], range[0]];\n    }\n    // latitude range is between -PI/2 and PI/2\n    if (range) {\n      this.config.latitudeRange = range.map(angle => utils.parseAngle(angle, true));\n    }\n    else {\n      this.config.latitudeRange = null;\n    }\n\n    if (this.psv.prop.ready) {\n      this.psv.rotate(this.psv.getPosition());\n    }\n  }\n\n  /**\n   * @summary Changes the longitude range\n   * @param {double[]|string[]} range - longitude range as two angles\n   */\n  setLongitudeRange(range) {\n    // longitude range must have two values\n    if (range && range.length !== 2) {\n      utils.logWarn('longitude range must have exactly two elements');\n      range = null;\n    }\n    // longitude range is between 0 and 2*PI\n    if (range) {\n      this.config.longitudeRange = range.map(angle => utils.parseAngle(angle));\n    }\n    else {\n      this.config.longitudeRange = null;\n    }\n\n    if (this.psv.prop.ready) {\n      this.psv.rotate(this.psv.getPosition());\n    }\n  }\n\n  /**\n   * @summary Changes the latitude and longitude ranges according the current panorama cropping data\n   */\n  setRangesFromPanoData() {\n    this.setLatitudeRange(this.getPanoLatitudeRange());\n    this.setLongitudeRange(this.getPanoLongitudeRange());\n  }\n\n  /**\n   * @summary Gets the latitude range defined by the viewer's panoData\n   * @returns {double[]|null}\n   * @private\n   */\n  getPanoLatitudeRange() {\n    const p = this.psv.prop.panoData;\n    if (p.croppedHeight === p.fullHeight) {\n      return null;\n    }\n    else {\n      const latitude = y => Math.PI * (1 - y / p.fullHeight) - (Math.PI / 2);\n      return [latitude(p.croppedY + p.croppedHeight), latitude(p.croppedY)];\n    }\n  }\n\n  /**\n   * @summary Gets the longitude range defined by the viewer's panoData\n   * @returns {double[]|null}\n   * @private\n   */\n  getPanoLongitudeRange() {\n    const p = this.psv.prop.panoData;\n    if (p.croppedWidth === p.fullWidth) {\n      return null;\n    }\n    else {\n      const longitude = x => 2 * Math.PI * (x / p.fullWidth) - Math.PI;\n      return [longitude(p.croppedX), longitude(p.croppedX + p.croppedWidth)];\n    }\n  }\n\n  /**\n   * @summary Apply \"longitudeRange\" and \"latitudeRange\"\n   * @param {PSV.Position} position\n   * @returns {{rangedPosition: PSV.Position, sidesReached: string[]}}\n   * @private\n   */\n  applyRanges(position) {\n    const rangedPosition = {\n      longitude: position.longitude,\n      latitude : position.latitude,\n    };\n    const sidesReached = {};\n\n    let range;\n    let offset;\n\n    if (this.config.longitudeRange) {\n      range = utils.clone(this.config.longitudeRange);\n      offset = MathUtils.degToRad(this.psv.prop.hFov) / 2;\n\n      range[0] = utils.parseAngle(range[0] + offset);\n      range[1] = utils.parseAngle(range[1] - offset);\n\n      if (range[0] > range[1]) { // when the range cross longitude 0\n        if (position.longitude > range[1] && position.longitude < range[0]) {\n          if (position.longitude > (range[0] / 2 + range[1] / 2)) { // detect which side we are closer too\n            rangedPosition.longitude = range[0];\n            sidesReached.left = true;\n          }\n          else {\n            rangedPosition.longitude = range[1];\n            sidesReached.right = true;\n          }\n        }\n      }\n      else if (position.longitude < range[0]) {\n        rangedPosition.longitude = range[0];\n        sidesReached.left = true;\n      }\n      else if (position.longitude > range[1]) {\n        rangedPosition.longitude = range[1];\n        sidesReached.right = true;\n      }\n    }\n\n    if (this.config.latitudeRange) {\n      range = utils.clone(this.config.latitudeRange);\n      offset = MathUtils.degToRad(this.psv.prop.vFov) / 2;\n\n      range[0] = utils.parseAngle(range[0] + offset, true);\n      range[1] = utils.parseAngle(range[1] - offset, true);\n\n      // for very a narrow images, lock the latitude to the center\n      if (range[0] > range[1]) {\n        range[0] = (range[0] + range[1]) / 2;\n        range[1] = range[0];\n      }\n\n      if (position.latitude < range[0]) {\n        rangedPosition.latitude = range[0];\n        sidesReached.bottom = true;\n      }\n      else if (position.latitude > range[1]) {\n        rangedPosition.latitude = range[1];\n        sidesReached.top = true;\n      }\n    }\n\n    return { rangedPosition, sidesReached };\n  }\n\n  /**\n   * @summary Reverses autorotate direction with smooth transition\n   * @private\n   */\n  __reverseAutorotate(left, right) {\n    // reverse already ongoing\n    if (left && this.psv.config.autorotateSpeed > 0 || right && this.psv.config.autorotateSpeed < 0) {\n      return;\n    }\n\n    this.psv.config.autorotateSpeed = -this.psv.config.autorotateSpeed;\n    this.psv.startAutorotate(true);\n  }\n\n}\n"],"names":["EPS","VisibleRangePlugin","psv","options","config","latitudeRange","longitudeRange","usePanoData","init","on","CONSTANTS","EVENTS","PANORAMA_LOADED","POSITION_UPDATED","ZOOM_UPDATED","CHANGE_EVENTS","GET_ANIMATE_POSITION","GET_ROTATE_POSITION","setLatitudeRange","setLongitudeRange","destroy","off","handleEvent","e","sidesReached","rangedPosition","currentPosition","type","value","applyRanges","args","left","right","isAutorotateEnabled","__reverseAutorotate","Math","abs","longitude","latitude","dynamics","position","setValue","setRangesFromPanoData","getPosition","rotate","range","length","utils","logWarn","map","angle","parseAngle","prop","ready","getPanoLatitudeRange","getPanoLongitudeRange","p","panoData","croppedHeight","fullHeight","y","PI","croppedY","croppedWidth","fullWidth","x","croppedX","offset","clone","MathUtils","degToRad","hFov","vFov","bottom","top","autorotateSpeed","startAutorotate","AbstractPlugin","id"],"mappings":"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"}