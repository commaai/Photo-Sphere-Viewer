{"version":3,"file":"resolution.js","sources":["../../src/plugins/resolution/constants.js","../../src/plugins/resolution/index.js"],"sourcesContent":["/**\n * @summary Available events\n * @enum {string}\n * @memberof PSV.plugins.ResolutionPlugin\n * @constant\n */\nexport const EVENTS = {\n  /**\n   * @event resolution-changed\n   * @memberof PSV.plugins.ResolutionPlugin\n   * @summary Triggered when the resolution is changed\n   * @param {string} resolutionId\n   */\n  RESOLUTION_CHANGED: 'resolution-changed',\n};\n","import { AbstractPlugin, CONSTANTS, DEFAULTS, PSVError, utils } from '../..';\nimport { EVENTS } from './constants';\n\n\n/**\n * @typedef {Object} PSV.plugins.ResolutionPlugin.Resolution\n * @property {string} id\n * @property {string} label\n * @property {*} panorama\n */\n\n/**\n * @typedef {Object} PSV.plugins.ResolutionPlugin.Options\n * @property {PSV.plugins.ResolutionPlugin.Resolution[]} resolutions - list of available resolutions\n * @property {string} [defaultResolution] - the default resolution if no panorama is configured on the viewer\n * @property {boolean} [showBadge=true] - show the resolution id as a badge on the settings button\n */\n\n\nDEFAULTS.lang.resolution = 'Quality';\n\n\nexport { EVENTS } from './constants';\n\n\n/**\n * @summary Adds a setting to choose between multiple resolutions of the panorama.\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport class ResolutionPlugin extends AbstractPlugin {\n\n  static id = 'resolution';\n\n  static EVENTS = EVENTS;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.plugins.ResolutionPlugin.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin}\n     * @readonly\n     * @private\n     */\n    this.settings = null;\n\n    /**\n     * @summary Available resolutions\n     * @member {PSV.plugins.ResolutionPlugin.Resolution[]}\n     */\n    this.resolutions = [];\n\n    /**\n     * @summary Available resolutions\n     * @member {Object.<string, PSV.plugins.ResolutionPlugin.Resolution>}\n     * @private\n     */\n    this.resolutionsById = {};\n\n    /**\n     * @type {Object}\n     * @property {string} resolution - Current resolution\n     * @private\n     */\n    this.prop = {\n      resolution: null,\n    };\n\n    /**\n     * @type {PSV.plugins.ResolutionPlugin.Options}\n     */\n    this.config = {\n      showBadge: true,\n      ...options,\n    };\n\n    if (this.config.defaultResolution && this.psv.config.panorama) {\n      utils.logWarn('ResolutionPlugin, a defaultResolution was provided '\n        + 'but a panorama is already configured on the viewer, '\n        + 'the defaultResolution will be ignored.');\n    }\n  }\n\n  /**\n   * @package\n   */\n  init() {\n    super.init();\n\n    this.settings = this.psv.getPlugin('settings');\n\n    if (!this.settings) {\n      throw new PSVError('Resolution plugin requires the Settings plugin');\n    }\n\n    this.settings.addSetting({\n      id     : ResolutionPlugin.id,\n      type   : 'options',\n      label  : this.psv.config.lang.resolution,\n      current: () => this.prop.resolution,\n      options: () => this.__getSettingsOptions(),\n      apply  : resolution => this.__setResolutionIfExists(resolution),\n      badge  : !this.config.showBadge ? null : () => this.prop.resolution,\n    });\n\n    this.psv.on(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n\n    if (this.config.resolutions) {\n      this.setResolutions(this.config.resolutions, this.psv.config.panorama ? null : this.config.defaultResolution);\n      delete this.config.resolutions;\n      delete this.config.defaultResolution;\n    }\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.PANORAMA_LOADED, this);\n\n    this.settings.removeSetting(ResolutionPlugin.id);\n\n    super.destroy();\n  }\n\n  /**\n   * @summary Handles events\n   * @param {Event} e\n   * @private\n   */\n  handleEvent(e) {\n    if (e.type === CONSTANTS.EVENTS.PANORAMA_LOADED) {\n      this.__refreshResolution();\n    }\n  }\n\n  /**\n   * @summary Changes the available resolutions\n   * @param {PSV.plugins.ResolutionPlugin.Resolution[]} resolutions\n   * @param {string} [defaultResolution] - if not provided, the current panorama is kept\n   */\n  setResolutions(resolutions, defaultResolution) {\n    this.resolutions = resolutions;\n    this.resolutionsById = {};\n\n    resolutions.forEach((resolution) => {\n      if (!resolution.id) {\n        throw new PSVError('Missing resolution id');\n      }\n      this.resolutionsById[resolution.id] = resolution;\n    });\n\n    // pick first resolution if no default provided and no current panorama\n    if (!this.psv.config.panorama && !defaultResolution) {\n      defaultResolution = resolutions[0].id;\n    }\n\n    // ensure the default resolution exists\n    if (defaultResolution && !this.resolutionsById[defaultResolution]) {\n      utils.logWarn(`Resolution ${defaultResolution} unknown`);\n      defaultResolution = resolutions[0].id;\n    }\n\n    if (defaultResolution) {\n      this.setResolution(defaultResolution);\n    }\n\n    this.__refreshResolution();\n  }\n\n  /**\n   * @summary Changes the current resolution\n   * @param {string} id\n   * @throws {PSVError} if the resolution does not exist\n   */\n  setResolution(id) {\n    if (!this.resolutionsById[id]) {\n      throw new PSVError(`Resolution ${id} unknown`);\n    }\n\n    return this.__setResolutionIfExists(id);\n  }\n\n  /**\n   * @private\n   * @return {Promise}\n   */\n  __setResolutionIfExists(id) {\n    if (this.resolutionsById[id]) {\n      return this.psv.setPanorama(this.resolutionsById[id].panorama, { transition: false, showLoader: false });\n    }\n    else {\n      return Promise.resolve();\n    }\n  }\n\n  /**\n   * @summary Returns the current resolution\n   * @return {string}\n   */\n  getResolution() {\n    return this.prop.resolution;\n  }\n\n  /**\n   * @summary Updates current resolution on panorama load\n   * @private\n   */\n  __refreshResolution() {\n    const resolution = this.resolutions.find(r => utils.deepEqual(this.psv.config.panorama, r.panorama));\n    if (this.prop.resolution !== resolution?.id) {\n      this.prop.resolution = resolution?.id;\n      this.settings?.updateButton();\n      this.trigger(EVENTS.RESOLUTION_CHANGED, this.prop.resolution);\n    }\n  }\n\n  /**\n   * @summary Returns options for Settings plugin\n   * @return {PSV.plugins.SettingsPlugin.Option[]}\n   * @private\n   */\n  __getSettingsOptions() {\n    return this.resolutions\n      .map(resolution => ({\n        id   : resolution.id,\n        label: resolution.label,\n      }));\n  }\n\n}\n"],"names":["EVENTS","RESOLUTION_CHANGED","DEFAULTS","lang","resolution","ResolutionPlugin","psv","options","settings","resolutions","resolutionsById","prop","config","showBadge","defaultResolution","panorama","utils","logWarn","init","getPlugin","PSVError","addSetting","id","type","label","current","__getSettingsOptions","apply","__setResolutionIfExists","badge","on","CONSTANTS","PANORAMA_LOADED","setResolutions","destroy","off","removeSetting","handleEvent","e","__refreshResolution","forEach","setResolution","setPanorama","transition","showLoader","Promise","resolve","getResolution","find","r","deepEqual","updateButton","trigger","map","AbstractPlugin"],"mappings":"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"}