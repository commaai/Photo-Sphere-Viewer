{"version":3,"file":"settings.js","sources":["../../src/plugins/settings/constants.js","../../src/plugins/settings/SettingsButton.js","../../src/data/constants.js","../../src/plugins/settings/SettingsComponent.js","../../src/plugins/settings/index.js"],"sourcesContent":["import { utils } from '../..';\nimport check from './check.svg';\nimport chevron from './chevron.svg';\nimport switchOff from './switch-off.svg';\nimport switchOn from './switch-on.svg';\n\n/**\n * @summary Available events\n * @enum {string}\n * @memberof PSV.plugins.SettingsPlugin\n * @constant\n */\nexport const EVENTS = {\n  /**\n   * @event setting-changed\n   * @memberof PSV.plugins.SettingsPlugin\n   * @summary Triggered when a setting is changed\n   * @param {string} settingId\n   * @param {any} value\n   */\n  SETTING_CHANGED: 'setting-changed',\n};\n\n/**\n * @type {string}\n * @memberof PSV.plugins.SettingsPlugin\n * @constant\n */\nexport const TYPE_OPTIONS = 'options';\n\n/**\n * @type {string}\n * @memberof PSV.plugins.SettingsPlugin\n * @constant\n */\nexport const TYPE_TOGGLE = 'toggle';\n\n/**\n * @summary Key of settings in LocalStorage\n * @type {string}\n * @constant\n * @private\n */\nexport const LOCAL_STORAGE_KEY = 'psvSettings';\n\n/**\n * @summary Panel identifier for settings content\n * @type {string}\n * @constant\n * @private\n */\nexport const ID_PANEL = 'settings';\n\n/**\n * @summary Property name added to settings items\n * @type {string}\n * @constant\n * @private\n */\nexport const SETTING_DATA = 'settingId';\n\n/**\n * @summary Property name added to settings items\n * @type {string}\n * @constant\n * @private\n */\nexport const OPTION_DATA = 'optionId';\n\n/**\n * @summary Identifier of the \"back\" list item\n * @type {string}\n * @constant\n * @private\n */\nexport const ID_BACK = '__back';\n\n/**\n * @summary Identifier of the \"back\" list item\n * @type {string}\n * @constant\n * @private\n */\nexport const ID_ENTER = '__enter';\n\nconst SETTING_DATA_KEY = utils.dasherize(SETTING_DATA);\nconst OPTION_DATA_KEY = utils.dasherize(OPTION_DATA);\n\n/**\n * @summary Setting item template, by type\n * @constant\n * @private\n */\nexport const SETTINGS_TEMPLATE_ = {\n  [TYPE_OPTIONS]: (setting, optionsCurrent) => `\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\n      <span class=\"psv-settings-item-value\">${optionsCurrent(setting)}</span>\n      <span class=\"psv-settings-item-icon\">${chevron}</span>\n    `,\n  [TYPE_TOGGLE] : setting => `\n      <span class=\"psv-settings-item-label\">${setting.label}</span>\n      <span class=\"psv-settings-item-value\">${setting.active() ? switchOn : switchOff}</span>\n    `,\n};\n\n/**\n * @summary Settings list template\n * @param {PSV.plugins.SettingsPlugin.Setting[]} settings\n * @param {function} optionsCurrent\n * @returns {string}\n * @constant\n * @private\n */\nexport const SETTINGS_TEMPLATE = (settings, optionsCurrent) => `\n<ul class=\"psv-settings-list\">\n  ${settings.map(s => `\n    <li class=\"psv-settings-item\" tabindex=\"0\"\n        data-${SETTING_DATA_KEY}=\"${s.id}\" data-${OPTION_DATA_KEY}=\"${ID_ENTER}\">\n      ${SETTINGS_TEMPLATE_[s.type](s, optionsCurrent)}\n    </li>\n  `).join('')}\n</ul>\n`;\n\n/**\n * @summary Settings options template\n * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\n * @param {function} optionActive\n * @returns {string}\n * @constant\n * @private\n */\nexport const SETTING_OPTIONS_TEMPLATE = (setting, optionActive) => `\n<ul class=\"psv-settings-list\">\n  <li class=\"psv-settings-item psv-settings-item--header\" tabindex=\"0\"\n      data-${SETTING_DATA_KEY}=\"${setting.id}\" data-${OPTION_DATA_KEY}=\"${ID_BACK}\">\n    <span class=\"psv-settings-item-icon\">${chevron}</span>\n    <span class=\"psv-settings-item-label\">${setting.label}</span>\n  </li>\n  ${setting.options().map(option => `\n    <li class=\"psv-settings-item\" tabindex=\"0\"\n        data-${SETTING_DATA_KEY}=\"${setting.id}\" data-${OPTION_DATA_KEY}=\"${option.id}\">\n      <span class=\"psv-settings-item-icon\">${optionActive(option) ? check : ''}</span>\n      <span class=\"psv-settings-item-value\">${option.label}</span>\n    </li>\n  `).join('')}\n</ul>\n`;\n","import { AbstractButton } from '../..';\nimport icon from './settings.svg';\n\n/**\n * @summary Navigation bar settings button class\n * @extends PSV.buttons.AbstractButton\n * @memberof PSV.buttons\n */\nexport class SettingsButton extends AbstractButton {\n\n  static id = 'settings';\n  static icon = icon;\n\n  /**\n   * @param {PSV.components.Navbar} navbar\n   */\n  constructor(navbar) {\n    super(navbar, 'psv-button--hover-scale psv-settings-button', true);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin}\n     * @private\n     * @readonly\n     */\n    this.plugin = this.psv.getPlugin('settings');\n\n    /**\n     * @member {HTMLElement}\n     * @private\n     * @readonly\n     */\n    this.badge = document.createElement('div');\n    this.badge.className = 'psv-settings-badge';\n    this.badge.style.display = 'none';\n    this.container.appendChild(this.badge);\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    delete this.plugin;\n\n    super.destroy();\n  }\n\n  /**\n   * @override\n   */\n  isSupported() {\n    return !!this.plugin;\n  }\n\n  /**\n   * @override\n   * @description Toggles settings\n   */\n  onClick() {\n    this.plugin.toggleSettings();\n  }\n\n  /**\n   * @summary Changes the badge value\n   * @param {string} value\n   */\n  setBadge(value) {\n    this.badge.innerText = value;\n    this.badge.style.display = value ? '' : 'none';\n  }\n\n}\n","/**\n * @namespace PSV.constants\n */\n\n/**\n * @summary Default duration of the transition between panoramas\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const DEFAULT_TRANSITION = 1500;\n\n/**\n * @summary Number of pixels bellow which a mouse move will be considered as a click\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const MOVE_THRESHOLD = 4;\n\n/**\n * @summary Delay in milliseconds between two clicks to consider a double click\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const DBLCLICK_DELAY = 300;\n\n/**\n * @summary Delay in milliseconds to emulate a long touch\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const LONGTOUCH_DELAY = 500;\n\n/**\n * @summary Delay in milliseconds to for the two fingers overlay to appear\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const TWOFINGERSOVERLAY_DELAY = 100;\n\n/**\n * @summary Duration in milliseconds of the \"ctrl zoom\" overlay\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const CTRLZOOM_TIMEOUT = 2000;\n\n/**\n * @summary Time size of the mouse position history used to compute inertia\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const INERTIA_WINDOW = 300;\n\n/**\n * @summary Radius of the THREE.SphereGeometry, Half-length of the THREE.BoxGeometry\n * @memberOf PSV.constants\n * @type {number}\n * @constant\n */\nexport const SPHERE_RADIUS = 10;\n\n/**\n * @summary Property name added to viewer element\n * @memberOf PSV.constants\n * @type {string}\n * @constant\n */\nexport const VIEWER_DATA = 'photoSphereViewer';\n\n/**\n * @summary Property added the the main Mesh object\n * @memberOf PSV.constants\n * @type {string}\n * @constant\n */\nexport const MESH_USER_DATA = 'psvSphere';\n\n/**\n * @summary Available actions\n * @memberOf PSV.constants\n * @enum {string}\n * @constant\n */\nexport const ACTIONS = {\n  ROTATE_LAT_UP    : 'rotateLatitudeUp',\n  ROTATE_LAT_DOWN  : 'rotateLatitudeDown',\n  ROTATE_LONG_RIGHT: 'rotateLongitudeRight',\n  ROTATE_LONG_LEFT : 'rotateLongitudeLeft',\n  ZOOM_IN          : 'zoomIn',\n  ZOOM_OUT         : 'zoomOut',\n  TOGGLE_AUTOROTATE: 'toggleAutorotate',\n};\n\n/**\n * @summary Available events names\n * @memberOf PSV.constants\n * @enum {string}\n * @constant\n */\nexport const EVENTS = {\n  /**\n   * @event autorotate\n   * @memberof PSV\n   * @summary Triggered when the automatic rotation is enabled/disabled\n   * @param {boolean} enabled\n   */\n  AUTOROTATE        : 'autorotate',\n  /**\n   * @event before-render\n   * @memberof PSV\n   * @summary Triggered before a render, used to modify the view\n   * @param {number} timestamp - time provided by requestAnimationFrame\n   * @param {number} elapsed - time elapsed from the previous frame\n   */\n  BEFORE_RENDER     : 'before-render',\n  /**\n   * @event before-rotate\n   * @memberOf PSV\n   * @summary Triggered before a rotate operation, can be cancelled\n   * @param {PSV.ExtendedPosition}\n   */\n  BEFORE_ROTATE     : 'before-rotate',\n  /**\n   * @event click\n   * @memberof PSV\n   * @summary Triggered when the user clicks on the viewer (everywhere excluding the navbar and the side panel)\n   * @param {PSV.ClickData} data\n   */\n  CLICK             : 'click',\n  /**\n   * @event close-panel\n   * @memberof PSV\n   * @summary Triggered when the panel is closed\n   * @param {string} [id]\n   */\n  CLOSE_PANEL       : 'close-panel',\n  /**\n   * @event config-changed\n   * @memberOf PSV\n   * @summary Triggered after a call to setOption/setOptions\n   * @param {string[]} name of changed options\n   */\n  CONFIG_CHANGED    : 'config-changed',\n  /**\n   * @event dblclick\n   * @memberof PSV\n   * @summary Triggered when the user double clicks on the viewer. The simple `click` event is always fired before `dblclick`\n   * @param {PSV.ClickData} data\n   */\n  DOUBLE_CLICK      : 'dblclick',\n  /**\n   * @event fullscreen-updated\n   * @memberof PSV\n   * @summary Triggered when the fullscreen mode is enabled/disabled\n   * @param {boolean} enabled\n   */\n  FULLSCREEN_UPDATED: 'fullscreen-updated',\n  /**\n   * @event hide-notification\n   * @memberof PSV\n   * @summary Triggered when the notification is hidden\n   * @param {string} [id]\n   */\n  HIDE_NOTIFICATION : 'hide-notification',\n  /**\n   * @event hide-overlay\n   * @memberof PSV\n   * @summary Triggered when the overlay is hidden\n   * @param {string} [id]\n   */\n  HIDE_OVERLAY      : 'hide-overlay',\n  /**\n   * @event hide-tooltip\n   * @memberof PSV\n   * @summary Triggered when the tooltip is hidden\n   * @param {*} Data associated to this tooltip\n   */\n  HIDE_TOOLTIP      : 'hide-tooltip',\n  /**\n   * @event key-press\n   * @memberof PSV\n   * @summary Triggered when a key is pressed, can be cancelled\n   * @param {string} key\n   */\n  KEY_PRESS         : 'key-press',\n  /**\n   * @event load-progress\n   * @memberof PSV\n   * @summary Triggered when the loader value changes\n   * @param {number} value from 0 to 100\n   */\n  LOAD_PROGRESS     : 'load-progress',\n  /**\n   * @event open-panel\n   * @memberof PSV\n   * @summary Triggered when the panel is opened\n   * @param {string} [id]\n   */\n  OPEN_PANEL        : 'open-panel',\n  /**\n   * @event panorama-loaded\n   * @memberof PSV\n   * @summary Triggered when a panorama image has been loaded\n   * @param {PSV.TextureData} textureData\n   */\n  PANORAMA_LOADED   : 'panorama-loaded',\n  /**\n   * @event position-updated\n   * @memberof PSV\n   * @summary Triggered when the view longitude and/or latitude changes\n   * @param {PSV.Position} position\n   */\n  POSITION_UPDATED  : 'position-updated',\n  /**\n   * @event ready\n   * @memberof PSV\n   * @summary Triggered when the panorama image has been loaded and the viewer is ready to perform the first render\n   */\n  READY             : 'ready',\n  /**\n   * @event render\n   * @memberof PSV\n   * @summary Triggered on each viewer render, **this event is triggered very often**\n   */\n  RENDER            : 'render',\n  /**\n   * @event show-notification\n   * @memberof PSV\n   * @summary Triggered when the notification is shown\n   * @param {string} [id]\n   */\n  SHOW_NOTIFICATION : 'show-notification',\n  /**\n   * @event show-overlay\n   * @memberof PSV\n   * @summary Triggered when the overlay is shown\n   * @param {string} [id]\n   */\n  SHOW_OVERLAY      : 'show-overlay',\n  /**\n   * @event show-tooltip\n   * @memberof PSV\n   * @summary Triggered when the tooltip is shown\n   * @param {*} Data associated to this tooltip\n   * @param {PSV.components.Tooltip} Instance of the tooltip\n   */\n  SHOW_TOOLTIP      : 'show-tooltip',\n  /**\n   * @event size-updated\n   * @memberof PSV\n   * @summary Triggered when the viewer size changes\n   * @param {PSV.Size} size\n   */\n  SIZE_UPDATED      : 'size-updated',\n  /**\n   * @event stop-all\n   * @memberof PSV\n   * @summary Triggered when all current animations are stopped\n   */\n  STOP_ALL          : 'stop-all',\n  /**\n   * @event zoom-updated\n   * @memberof PSV\n   * @summary Triggered when the zoom level changes\n   * @param {number} zoomLevel\n   */\n  ZOOM_UPDATED      : 'zoom-updated',\n};\n\n/**\n * @summary Available change events names\n * @memberOf PSV.constants\n * @enum {string}\n * @constant\n */\nexport const CHANGE_EVENTS = {\n  /**\n   * @event get-animate-position\n   * @memberof PSV\n   * @param {Position} position\n   * @returns {Position}\n   * @summary Called to alter the target position of an animation\n   */\n  GET_ANIMATE_POSITION: 'get-animate-position',\n  /**\n   * @event get-rotate-position\n   * @memberof PSV\n   * @param {Position} position\n   * @returns {Position}\n   * @summary Called to alter the target position of a rotation\n   */\n  GET_ROTATE_POSITION : 'get-rotate-position',\n};\n\n/**\n * @summary Special events emitted to listener using {@link Viewer#observeObjects}\n * @memberOf PSV.constants\n * @constant\n * @package\n */\nexport const OBJECT_EVENTS = {\n  ENTER_OBJECT: 'enter-object',\n  HOVER_OBJECT: 'hover-object',\n  LEAVE_OBJECT: 'leave-object',\n};\n\n/**\n * @summary Internal identifiers for various stuff\n * @memberOf PSV.constants\n * @enum {string}\n * @constant\n */\nexport const IDS = {\n  MENU       : 'menu',\n  TWO_FINGERS: 'twoFingers',\n  CTRL_ZOOM  : 'ctrlZoom',\n  ERROR      : 'error',\n  DESCRIPTION: 'description',\n};\n\n/* eslint-disable */\n// @formatter:off\n/**\n * @summary Collection of easing functions\n * @memberOf PSV.constants\n * @see {@link https://gist.github.com/frederickk/6165768}\n * @type {Object<string, Function>}\n * @constant\n */\nexport const EASINGS = {\n  linear    : (t) => t,\n\n  inQuad    : (t) => t*t,\n  outQuad   : (t) => t*(2-t),\n  inOutQuad : (t) => t<.5 ? 2*t*t : -1+(4-2*t)*t,\n\n  inCubic   : (t) => t*t*t,\n  outCubic  : (t) => (--t)*t*t+1,\n  inOutCubic: (t) => t<.5 ? 4*t*t*t : (t-1)*(2*t-2)*(2*t-2)+1,\n\n  inQuart   : (t) => t*t*t*t,\n  outQuart  : (t) => 1-(--t)*t*t*t,\n  inOutQuart: (t) => t<.5 ? 8*t*t*t*t : 1-8*(--t)*t*t*t,\n\n  inQuint   : (t) => t*t*t*t*t,\n  outQuint  : (t) => 1+(--t)*t*t*t*t,\n  inOutQuint: (t) => t<.5 ? 16*t*t*t*t*t : 1+16*(--t)*t*t*t*t,\n\n  inSine    : (t) => 1-Math.cos(t*(Math.PI/2)),\n  outSine   : (t) => Math.sin(t*(Math.PI/2)),\n  inOutSine : (t) => .5-.5*Math.cos(Math.PI*t),\n\n  inExpo    : (t) => Math.pow(2, 10*(t-1)),\n  outExpo   : (t) => 1-Math.pow(2, -10*t),\n  inOutExpo : (t) => (t=t*2-1)<0 ? .5*Math.pow(2, 10*t) : 1-.5*Math.pow(2, -10*t),\n\n  inCirc    : (t) => 1-Math.sqrt(1-t*t),\n  outCirc   : (t) => Math.sqrt(1-(t-1)*(t-1)),\n  inOutCirc : (t) => (t*=2)<1 ? .5-.5*Math.sqrt(1-t*t) : .5+.5*Math.sqrt(1-(t-=2)*t)\n};\n// @formatter:on\n/* eslint-enable */\n\n/**\n * @summary Subset of key codes\n * @memberOf PSV.constants\n * @type {Object<string, string>}\n * @constant\n */\nexport const KEY_CODES = {\n  Enter     : 'Enter',\n  Control   : 'Control',\n  Escape    : 'Escape',\n  Space     : ' ',\n  PageUp    : 'PageUp',\n  PageDown  : 'PageDown',\n  ArrowLeft : 'ArrowLeft',\n  ArrowUp   : 'ArrowUp',\n  ArrowRight: 'ArrowRight',\n  ArrowDown : 'ArrowDown',\n  Delete    : 'Delete',\n  Plus      : '+',\n  Minus     : '-',\n};\n","import { AbstractComponent, utils } from '../..';\nimport { EVENTS, KEY_CODES } from '../../data/constants';\nimport {\n  ID_BACK,\n  ID_ENTER,\n  OPTION_DATA,\n  SETTING_DATA,\n  SETTING_OPTIONS_TEMPLATE,\n  SETTINGS_TEMPLATE,\n  TYPE_OPTIONS,\n  TYPE_TOGGLE\n} from './constants';\n\n/**\n * @private\n */\nexport class SettingsComponent extends AbstractComponent {\n\n  constructor(plugin) {\n    super(plugin.psv, 'psv-settings psv--capture-event');\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin}\n     * @private\n     * @readonly\n     */\n    this.plugin = plugin;\n\n    /**\n     * @type {Object}\n     * @private\n     */\n    this.prop = {\n      ...this.prop,\n    };\n\n    this.container.addEventListener('click', this);\n    this.container.addEventListener('transitionend', this);\n    this.container.addEventListener('keydown', this);\n\n    this.hide();\n  }\n\n  /**\n   * @override\n   */\n  destroy() {\n    delete this.plugin;\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case 'click':\n        this.__click(e.target);\n        break;\n\n      case 'transitionend':\n        if (!this.isVisible()) {\n          this.container.innerHTML = ''; // empty content after fade out\n        }\n        else {\n          this.__focusFirstOption();\n        }\n        break;\n\n      case 'keydown':\n        if (this.isVisible()) {\n          switch (e.key) {\n            case KEY_CODES.Escape:\n              this.plugin.hideSettings();\n              break;\n            case KEY_CODES.Enter:\n              this.__click(e.target);\n              break;\n          }\n        }\n        break;\n\n      case EVENTS.KEY_PRESS:\n        if (this.isVisible() && e.args[0] === KEY_CODES.Escape) {\n          this.plugin.hideSettings();\n          e.preventDefault();\n        }\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @override\n   */\n  show() {\n    this.__showSettings(false);\n\n    this.container.classList.add('psv-settings--open');\n    this.prop.visible = true;\n  }\n\n  /**\n   * @override\n   */\n  hide() {\n    this.container.classList.remove('psv-settings--open');\n    this.prop.visible = false;\n  }\n\n  /**\n   * @summary Handle clicks on items\n   * @param {HTMLElement} element\n   * @private\n   */\n  __click(element) {\n    const li = utils.getClosest(element, 'li');\n    if (!li) {\n      return;\n    }\n\n    const settingId = li.dataset[SETTING_DATA];\n    const optionId = li.dataset[OPTION_DATA];\n\n    const setting = this.plugin.settings.find(s => s.id === settingId);\n\n    switch (optionId) {\n      case ID_BACK:\n        this.__showSettings(true);\n        break;\n\n      case ID_ENTER:\n        switch (setting.type) {\n          case TYPE_TOGGLE:\n            this.plugin.toggleSettingValue(setting);\n            this.__showSettings(true); // re-render\n            break;\n\n          case TYPE_OPTIONS:\n            this.__showOptions(setting);\n            break;\n\n          default:\n          // noop\n        }\n        break;\n\n      default:\n        switch (setting.type) {\n          case TYPE_OPTIONS:\n            this.hide();\n            this.plugin.applySettingOption(setting, optionId);\n            break;\n\n          default:\n          // noop\n        }\n        break;\n    }\n  }\n\n  /**\n   * @summary Shows the list of options\n   * @private\n   */\n  __showSettings(focus) {\n    this.container.innerHTML = SETTINGS_TEMPLATE(\n      this.plugin.settings,\n      (setting) => {\n        const current = setting.current();\n        const option = setting.options()\n          .find(opt => opt.id === current);\n        return option?.label;\n      }\n    );\n\n    // must not focus during the initial transition\n    if (focus) {\n      this.__focusFirstOption();\n    }\n  }\n\n  /**\n   * @summary Shows setting options panel\n   * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\n   * @private\n   */\n  __showOptions(setting) {\n    const current = setting.current();\n\n    this.container.innerHTML = SETTING_OPTIONS_TEMPLATE(\n      setting,\n      (option) => {\n        return option.id === current;\n      }\n    );\n\n    this.__focusFirstOption();\n  }\n\n  __focusFirstOption() {\n    this.container.querySelector('[tabindex]')?.focus();\n  }\n\n}\n","import { AbstractPlugin, CONSTANTS, DEFAULTS, PSVError, registerButton, utils } from '../..';\nimport { EVENTS, LOCAL_STORAGE_KEY, SETTINGS_TEMPLATE_, TYPE_OPTIONS, TYPE_TOGGLE } from './constants';\nimport { SettingsButton } from './SettingsButton';\nimport { SettingsComponent } from './SettingsComponent';\nimport './style.scss';\n\n\n/**\n * @typedef {Object} PSV.plugins.SettingsPlugin.Setting\n * @summary Description of a setting\n * @property {string} id - identifier of the setting\n * @property {string} label - label of the setting\n * @property {'options' | 'toggle'} type - type of the setting\n * @property {function} [badge] - function which returns the value of the button badge\n */\n\n/**\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.OptionsSetting\n * @summary Description of a 'options' setting\n * @property {'options'} type - type of the setting\n * @property {function} current - function which returns the current option id\n * @property {function} options - function which the possible options as an array of {@link PSV.plugins.SettingsPlugin.Option}\n * @property {function} apply - function called with the id of the selected option\n */\n\n/**\n * @typedef {PSV.plugins.SettingsPlugin.Setting} PSV.plugins.SettingsPlugin.ToggleSetting\n * @summary Description of a 'toggle' setting\n * @property {'toggle'} type - type of the setting\n * @property {function} active - function which return whereas the setting is active or not\n * @property {function} toggle - function called when the setting is toggled\n */\n\n/**\n * @typedef {Object} PSV.plugins.SettingsPlugin.Option\n * @summary Option of an 'option' setting\n * @property {string} id - identifier of the option\n * @property {string} label - label of the option\n */\n\n/**\n * @typedef {Object} PSV.plugins.SettingsPlugin.Options\n * @property {boolean} [persist=false] - should the settings be saved accross sessions\n * @property {Object} [storage] - custom storage handler, defaults to LocalStorage\n * @property {PSV.plugins.SettingsPlugin.StorageGetter} [storage.get]\n * @property {PSV.plugins.SettingsPlugin.StorageSetter} [storage.set]\n */\n\n/**\n * @callback StorageGetter\n * @memberOf PSV.plugins.SettingsPlugin\n * @param {string} settingId\n * @return {boolean | string | Promise<boolean | string>} - return `undefined` or `null` if the option does not exist\n */\n\n/**\n * @callback StorageSetter\n * @memberOf PSV.plugins.SettingsPlugin\n * @param {string} settingId\n * @param {boolean | string} value\n */\n\n\n// add settings button\nDEFAULTS.lang[SettingsButton.id] = 'Settings';\nregisterButton(SettingsButton, 'fullscreen:left');\n\n\nfunction getData() {\n  return JSON.parse(localStorage.getItem(LOCAL_STORAGE_KEY)) || {};\n}\n\nfunction setData(data) {\n  localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(data));\n}\n\n\nexport { EVENTS, TYPE_TOGGLE, TYPE_OPTIONS } from './constants';\n\n\n/**\n * @summary Adds a button to access various settings.\n * @extends PSV.plugins.AbstractPlugin\n * @memberof PSV.plugins\n */\nexport class SettingsPlugin extends AbstractPlugin {\n\n  static id = 'settings';\n\n  static EVENTS = EVENTS;\n  static TYPE_TOGGLE = TYPE_TOGGLE;\n  static TYPE_OPTIONS = TYPE_OPTIONS;\n\n  /**\n   * @param {PSV.Viewer} psv\n   * @param {PSV.plugins.SettingsPlugin.Options} options\n   */\n  constructor(psv, options) {\n    super(psv);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin.Options}\n     */\n    this.config = {\n      persist: false,\n      storage: {\n        get(id) {\n          return getData()[id];\n        },\n        set(id, value) {\n          const data = getData();\n          data[id] = value;\n          setData(data);\n        },\n      },\n      ...options,\n    };\n\n    /**\n     * @type {SettingsComponent}\n     * @private\n     * @readonly\n     */\n    this.component = new SettingsComponent(this);\n\n    /**\n     * @type {PSV.plugins.SettingsPlugin.Setting[]}\n     * @private\n     */\n    this.settings = [];\n  }\n\n  /**\n   * @package\n   */\n  init() {\n    super.init();\n\n    this.psv.on(CONSTANTS.EVENTS.CLICK, this);\n    this.psv.on(CONSTANTS.EVENTS.OPEN_PANEL, this);\n\n    // buttons are initialized just after plugins\n    setTimeout(() => this.updateButton());\n  }\n\n  /**\n   * @package\n   */\n  destroy() {\n    this.psv.off(CONSTANTS.EVENTS.CLICK, this);\n    this.psv.off(CONSTANTS.EVENTS.OPEN_PANEL, this);\n\n    this.component.destroy();\n\n    delete this.component;\n    this.settings.length = 0;\n\n    super.destroy();\n  }\n\n  /**\n   * @private\n   */\n  handleEvent(e) {\n    /* eslint-disable */\n    switch (e.type) {\n      case CONSTANTS.EVENTS.CLICK:\n      case CONSTANTS.EVENTS.OPEN_PANEL:\n        if (this.component.isVisible()) {\n          this.hideSettings();\n        }\n        break;\n    }\n    /* eslint-enable */\n  }\n\n  /**\n   * @summary Registers a new setting\n   * @param {PSV.plugins.SettingsPlugin.Setting} setting\n   */\n  addSetting(setting) {\n    if (!setting.id) {\n      throw new PSVError('Missing setting id');\n    }\n    if (!setting.type) {\n      throw new PSVError('Missing setting type');\n    }\n    if (!SETTINGS_TEMPLATE_[setting.type]) {\n      throw new PSVError('Unsupported setting type');\n    }\n\n    if (setting.badge && this.settings.some(s => s.badge)) {\n      utils.logWarn('More than one setting with a badge are declared, the result is unpredictable.');\n    }\n\n    this.settings.push(setting);\n\n    if (this.component.isVisible()) {\n      this.component.show(); // re-render\n    }\n\n    this.updateButton();\n\n    if (this.config.persist) {\n      Promise.resolve(this.config.storage.get(setting.id))\n        .then((value) => {\n          switch (setting.type) {\n            case TYPE_TOGGLE:\n              if (!utils.isNil(value) && value !== setting.active()) {\n                setting.toggle();\n                this.trigger(EVENTS.SETTING_CHANGED, setting.id, setting.active());\n              }\n              break;\n\n            case TYPE_OPTIONS:\n              if (!utils.isNil(value) && value !== setting.current()) {\n                setting.apply(value);\n                this.trigger(EVENTS.SETTING_CHANGED, setting.id, setting.current());\n              }\n              break;\n\n            default:\n            // noop\n          }\n\n          this.updateButton();\n        });\n    }\n  }\n\n  /**\n   * @summary Removes a setting\n   * @param {string} id\n   */\n  removeSetting(id) {\n    const idx = this.settings.findIndex(setting => setting.id === id);\n    if (idx !== -1) {\n      this.settings.splice(idx, 1);\n\n      if (this.component.isVisible()) {\n        this.component.show(); // re-render\n      }\n\n      this.updateButton();\n    }\n  }\n\n  /**\n   * @summary Toggles the settings menu\n   */\n  toggleSettings() {\n    this.component.toggle();\n    this.updateButton();\n  }\n\n  /**\n   * @summary Hides the settings menu\n   */\n  hideSettings() {\n    this.component.hide();\n    this.updateButton();\n  }\n\n  /**\n   * @summary Shows the settings menu\n   */\n  showSettings() {\n    this.component.show();\n    this.updateButton();\n  }\n\n  /**\n   * @summary Updates the badge in the button\n   */\n  updateButton() {\n    const value = this.settings.find(s => s.badge)?.badge();\n    const button = this.psv.navbar.getButton(SettingsButton.id, false);\n    button?.toggleActive(this.component.isVisible());\n    button?.setBadge(value);\n  }\n\n  /**\n   * @summary Toggles a setting\n   * @param {PSV.plugins.SettingsPlugin.ToggleSetting} setting\n   * @package\n   */\n  toggleSettingValue(setting) {\n    const newValue = !setting.active(); // in case \"toggle\" is async\n\n    setting.toggle();\n\n    this.trigger(EVENTS.SETTING_CHANGED, setting.id, newValue);\n\n    if (this.config.persist) {\n      this.config.storage.set(setting.id, newValue);\n    }\n\n    this.updateButton();\n  }\n\n  /**\n   * @summary Changes the value of an setting\n   * @param {PSV.plugins.SettingsPlugin.OptionsSetting} setting\n   * @param {string} optionId\n   * @package\n   */\n  applySettingOption(setting, optionId) {\n    setting.apply(optionId);\n\n    this.trigger(EVENTS.SETTING_CHANGED, setting.id, optionId);\n\n    if (this.config.persist) {\n      this.config.storage.set(setting.id, optionId);\n    }\n\n    this.updateButton();\n  }\n\n}\n"],"names":["EVENTS","SETTING_CHANGED","TYPE_OPTIONS","TYPE_TOGGLE","LOCAL_STORAGE_KEY","SETTING_DATA","OPTION_DATA","ID_BACK","ID_ENTER","SETTING_DATA_KEY","utils","dasherize","OPTION_DATA_KEY","SETTINGS_TEMPLATE_","setting","optionsCurrent","label","chevron","active","switchOn","switchOff","SETTINGS_TEMPLATE","settings","map","s","id","type","join","SETTING_OPTIONS_TEMPLATE","optionActive","options","option","check","SettingsButton","navbar","plugin","psv","getPlugin","badge","document","createElement","className","style","display","container","appendChild","destroy","isSupported","onClick","toggleSettings","setBadge","value","innerText","AbstractButton","icon","AUTOROTATE","BEFORE_RENDER","BEFORE_ROTATE","CLICK","CLOSE_PANEL","CONFIG_CHANGED","DOUBLE_CLICK","FULLSCREEN_UPDATED","HIDE_NOTIFICATION","HIDE_OVERLAY","HIDE_TOOLTIP","KEY_PRESS","LOAD_PROGRESS","OPEN_PANEL","PANORAMA_LOADED","POSITION_UPDATED","READY","RENDER","SHOW_NOTIFICATION","SHOW_OVERLAY","SHOW_TOOLTIP","SIZE_UPDATED","STOP_ALL","ZOOM_UPDATED","KEY_CODES","Enter","Control","Escape","Space","PageUp","PageDown","ArrowLeft","ArrowUp","ArrowRight","ArrowDown","Delete","Plus","Minus","SettingsComponent","prop","addEventListener","hide","handleEvent","e","__click","target","isVisible","innerHTML","__focusFirstOption","key","hideSettings","args","preventDefault","show","__showSettings","classList","add","visible","remove","element","li","getClosest","settingId","dataset","optionId","find","toggleSettingValue","__showOptions","applySettingOption","focus","current","opt","querySelector","AbstractComponent","DEFAULTS","lang","registerButton","getData","JSON","parse","localStorage","getItem","setData","data","setItem","stringify","SettingsPlugin","config","persist","storage","get","set","component","init","on","CONSTANTS","setTimeout","updateButton","off","length","addSetting","PSVError","some","logWarn","push","Promise","resolve","then","isNil","toggle","trigger","apply","removeSetting","idx","findIndex","splice","showSettings","button","getButton","toggleActive","newValue","AbstractPlugin"],"mappings":"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G,MAAM,CAAA;KAC/C,CAAA;EAAA,EAAA,OAAA,cAAA,CAAA;EAAA,CAAA,CA5DiCE,gCAAc,CAAA,CAAA;EAArCpB,cAAc,CAElBR,EAAE,GAAG,UAAU,CAAA;EAFXQ,cAAc,CAGlBqB,IAAI,GAAGA,IAAI;;ECXpB;EACA;EACA;;EAkGA;EACA;EACA;EACA;EACA;EACA;EACO,IAAMtD,MAAM,GAAG;EACpB;EACF;EACA;EACA;EACA;EACA;EACEuD,EAAAA,UAAU,EAAU,YAAY;EAChC;EACF;EACA;EACA;EACA;EACA;EACA;EACEC,EAAAA,aAAa,EAAO,eAAe;EACnC;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,aAAa,EAAO,eAAe;EACnC;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,KAAK,EAAe,OAAO;EAC3B;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,WAAW,EAAS,aAAa;EACjC;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,cAAc,EAAM,gBAAgB;EACpC;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,YAAY,EAAQ,UAAU;EAC9B;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,kBAAkB,EAAE,oBAAoB;EACxC;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,iBAAiB,EAAG,mBAAmB;EACvC;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,YAAY,EAAQ,cAAc;EAClC;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,YAAY,EAAQ,cAAc;EAClC;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,SAAS,EAAW,WAAW;EAC/B;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,aAAa,EAAO,eAAe;EACnC;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,UAAU,EAAU,YAAY;EAChC;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,eAAe,EAAK,iBAAiB;EACrC;EACF;EACA;EACA;EACA;EACA;EACEC,EAAAA,gBAAgB,EAAI,kBAAkB;EACtC;EACF;EACA;EACA;E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"}